{
  "name": "Sass",
  "order": 4,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7dbd367417b2b2512bb4",
      "title": "Store Data with Sass Variables",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 不同于 CSS 的一个特点是它允许使用变量。我们可以在 Sass 中声明变量，并为它赋值，就像我们在 JavaScript 中一样。",
        "在 JavaScript 中，变量是使用<code>let</code>和<code>const</code>关键字定义的。在 Sass 中，变量以<code>$</code>开头的，后跟变量名。",
        "这里有几个例子：",
        "<blockquote>$main-fonts: Arial, sans-serif;<br>$headings-color: green;<br><br>//To use variables:<br>h1 {<br>&nbsp;&nbsp;font-family: $main-fonts;<br>&nbsp;&nbsp;color: $headings-color;<br>}</blockquote>",
        "当需要把多个元素设置成相同颜色时，变量就会很有用。一旦我们需要更改颜色，只需要改变这个变量的值就好。",
        "<hr>",
        "创建一个变量<code>$text-color</code>并将其设置为红色。然后更改<code>.blog-post</code>和<code>h2</code>的<code>color</code>属性的值为<code>$text-color</code>变量。"
      ],
      "tests": [
        {
          "text": "你应该为<code>$text-color</code>声明一个值为红色的 Sass 变量。",
          "testString": "assert(code.match(/\\$text-color:\\s*?red;/g), '你应该为<code>$text-color</code>声明一个 Sass 变量，其值为 red。');"
        },
        {
          "text": "你应使用<code>$text-color</code>变量来更改<code>.blog-post</code>和<code>h2</code>的<code>颜色</code>。",
          "testString": "assert(code.match(/color:\\s*?\\$text-color;/g), '你应使用<code>$text-color</code>变量来更改<code>.blog-post</code>和<code>h2</code>的<code>颜色</code>。');"
        },
        {
          "text": "<code>.blog-post</code>元素应为红色。",
          "testString": "assert($('.blog-post').css('color') == 'rgb(255, 0, 0)', '<code>.blog-post</code>元素应为红色。');"
        },
        {
          "text": "<code>h2</code>元素应为红色。",
          "testString": "assert($('h2').css('color') == 'rgb(255, 0, 0)', '<code>h2</code>元素应为红色。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  .header{",
            "    text-align: center;",
            "  }",
            "  .blog-post, h2 {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"header\">Learn Sass</h1>",
            "<div class=\"blog-post\">",
            "  <h2>Some random title</h2>",
            "  <p>This is a paragraph with some random text in it</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Header #2</h2>",
            "  <p>Here is some more random text.</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Here is another header</h2>",
            "  <p>Even more random text within a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb5",
      "title": "Nest CSS with Sass",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 允许 CSS 规则的<code>嵌套</code>，这在写样式表的时候会很有用。",
        "在 CSS 里，每个元素的样式都需要写在独立的代码块中，如下所示：",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br>}<br><br>nav ul {<br>&nbsp;&nbsp;list-style: none;<br>}<br><br>nav ul li {<br>&nbsp;&nbsp;display: inline-block;<br>}</blockquote>",
        "对于一个大型项目，CSS 规则会很复杂。这时，引入<code>嵌套</code>功能（即在对应的父元素中写子元素的样式）可以有效地简化代码：",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br><br>&nbsp;&nbsp;ul {<br>&nbsp;&nbsp;&nbsp;&nbsp;list-style: none;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;li {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline-block;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br></blockquote>",
        "<hr>",        
        "根据上面关于嵌套的例子，来简化<code>.blog-post<code>中两个子元素的 CSS 代码。出于测试目的，<code>h1</code>应该出现在<code>p</code>元素之前。"
      ],
      "tests": [
        {
          "text": "你应重新组织 CSS 规则，以便<code>h1</code>和<code>p</code>嵌套在<code>.blog-post</code>父元素中。",
          "testString": "assert(code.match(/\\.blog-post\\s*?{\\s*?h1\\s*?{\\s*?text-align:\\s*?center;\\s*?color:\\s*?blue;\\s*?}\\s*?p\\s*?{\\s*?font-size:\\s*?20px;\\s*?}\\s*?}/gi), '你应重新组织 CSS 规则，以便<code>h1</code>和<code>p</code>嵌套在<code>.blog-post</code>父元素中。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  .blog-post {",
            "    ",
            "  }",
            "  h1 {",
            "    text-align: center;",
            "    color: blue;",
            "  }",
            "  p {",
            "    font-size: 20px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blog-post\">",
            "  <h1>Blog Title</h1>",
            "  <p>This is a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb6",
      "title": "Create Reusable CSS with Mixins",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "在 Sass 中，<code>mixin</code>是一组 CSS 声明，可以在整个样式表中重复使用。",
        "CSS 的新功能需要一段时间适配后，所有浏览器后才能完全使用。随着浏览器的不断升级，使用这些 CSS 规则时可能需要添加浏览器前缀。比如 \"box-shadow\":",
        "<blockquote>div {<br>&nbsp;&nbsp;-webkit-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-moz-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-ms-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;box-shadow: 0px 0px 4px #fff;<br>}</blockquote>",
        "对于所有具有<code>box-shadow</code>属性的元素重写此规则，或者更改每个值以测试不同的效果，需要花费大量的精力。",
        "<code>Mixins</code>就像 CSS 的函数。以下是一个例子：",
        "<blockquote>@mixin box-shadow($x, $y, $blur, $c){ <br>&nbsp;&nbsp;-webkit-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-moz-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-ms-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;box-shadow: $x, $y, $blur, $c;<br>}</blockquote>",
        "定义以<code>@mixin</code>开头，后跟自定义名称。参数（<code>$x</code>，<code>$y</code>，<code>$blur</code>，以及上例中的<code>$c</code>是可选的。",
        "现在，只要在需要的地方使用<code>@include</code>调用上面定义的<code>mixin</code>，就可以自动添加好所有的浏览器前缀：<code>mixin</code>使用<code>@include</code>指令调用：",
        "<blockquote>div {<br>&nbsp;&nbsp;@include box-shadow(0px, 0px, 4px, #fff);<br>}</blockquote>",
        "<hr>",
        "为<code>border-radius</code>写一个<code>mixin</code>，并给它一个<code>$radius</code>参数。它应该使用示例中的所有浏览器前缀，然后使用<code>border-radius mixin</code>为<code>#awesome</code>元素提供 15px 的边框半径。"
      ],
      "tests": [
        {
          "text": "你应声明名为<code>border-radius</code>的<code>mixin</code>，其中包含名为<code>$radius</code>的参数。",
          "testString": "assert(code.match(/@mixin\\s+?border-radius\\s*?\\(\\s*?\\$radius\\s*?\\)\\s*?{/gi), '你应声明名为<code>border-radius</code>的<code>mixin</code>，其中包含名为<code>$radius</code>的参数。');"
        },
        {
          "text": "你应该给<code>$radius</code>添加<code>-webkit-border-radius</code>浏览器前缀。",
          "testString": "assert(code.match(/-webkit-border-radius:\\s*?\\$radius;/gi), '你应该给<code>$radius</code>添加<code>-webkit-border-radius</code>浏览器前缀。');"
        },
        {
          "text": "你应该给<code>$radius</code>添加<code>-moz-border-radius</code>浏览器前缀。",
          "testString": "assert(code.match(/-moz-border-radius:\\s*?\\$radius;/gi), '你应该给<code>$radius</code>添加<code>-moz-border-radius</code>浏览器前缀。');"
        },
        {
          "text": "你应该给<code>$radius</code>添加<code>-ms-border-radius</code>浏览器前缀。",
          "testString": "assert(code.match(/-ms-border-radius:\\s*?\\$radius;/gi), '你应该给<code>$radius</code>添加<code>-ms-border-radius</code>浏览器前缀。');"
        },
        {
          "text": "你应该给<code>$radius</code>添加<code>border-radius</code>。",
          "testString": "assert(code.match(/border-radius:\\s*?\\$radius;/gi).length == 4, '你应该给<code>$radius</code>添加<code>border-radius</code>。');"
        },
        {
          "text": "你应使用<code>@include</code>关键字调用<code>border-radius mixin</code>，并将其设置为 15px。",
          "testString": "assert(code.match(/@include\\s+?border-radius\\(\\s*?15px\\s*?\\);/gi), '你应使用<code>@include</code>关键字调用<code>border-radius mixin</code>，并将其设置为 15px。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #awesome {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: green;",
            "    ",
            "  }",
            "</style>",
            "",
            "<div id=\"awesome\"></div>",
            "  "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb8",
      "title": "Use @if and @else to Add Logic To Your Styles",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 中的<code>@if</code>指令对于测试特定情况非常有用--它的工作方式与 JavaScript</code>中的<code>if</code>语句类似。",
        "<blockquote>@mixin make-bold($bool) {<br>&nbsp;&nbsp;@if $bool == true {<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "类似 JavaScript，你可以在 Sass 中使用<code>@else if</code>和<code>@else</code>添加更多条件：",
        "<blockquote>@mixin text-effect($val) {<br>&nbsp;&nbsp;@if $val == danger {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == alert {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: yellow;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == success {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: green;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: black;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "创建一个名为<code>border-stroke</code>的<code>mixin</code>，它接受一个参数<code>$val</code>。<code>mixin</code>应使用<code>@if</code>，<code>@else if</code>和<code>@else</code>检查以下条件：",
        "<blockquote>light - 1px solid black<br>medium - 3px solid black<br>heavy - 6px solid black<br>none - no border</blockquote>"
      ],
      "tests": [
        {
          "text": "你应该声明一个名为<code>border-stroke</code>的<code>mixin</code>，它有一个名为<code>$val</code>的参数。",
          "testString": "assert(code.match(/@mixin\\s+?border-stroke\\s*?\\(\\s*?\\$val\\s*?\\)\\s*?{/gi), '你应该声明一个名为<code>border-stroke</code>的<code>mixin</code>，它有一个名为<code>$val</code>的参数。');"
        },
        {
          "text": "<code>mixin</code>应该有一个<code>@if</code>语句来检查<code>$val</code>是否很轻，并将<code>border</code>设置为 1px 纯黑色。",
          "testString": "assert(code.match(/@if\\s+?\\$val\\s*?===?\\s*?light\\s*?{\\s*?border\\s*?:\\s*?1px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), '<code>mixin</code>应该有一个<code>@if</code>语句来检查<code>$val</code>是否很轻，并将<code>border</code>设置为 1px 纯黑色。');"
        },
        {
          "text": "<code>mixin</code>应该有一个<code>@else if</code>语句来检查<code>$val</code>是否中等，并设置<code>border</code>为3px 纯黑色。",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?medium\\s*?{\\s*?border\\s*?:\\s*?3px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), '<code>mixin</code>应该有一个<code>@else if</code>语句来检查<code>$val</code>是否中等，并设置<code>border</code>为3px 纯黑色。');"
        },
        {
          "text": "<code>mixin</code>应该有一个<code>@else if</code>语句来检查<code>$val</code>是否很重，并设置<code>border</code>为6px 纯黑色。",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?heavy\\s*?{\\s*?border\\s*?:\\s*?6px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), '<code>mixin</code>应该有一个<code>@else if</code>语句来检查<code>$val</code>是否很重，并设置<code>border</code>为6px 纯黑色。');"
        },
        {
          "text": "<code>mixin</code>应该有一个<code>@else</code>语句来将<code>border</code>设置为 none。",
          "testString": "assert(code.match(/@else\\s*?{\\s*?border\\s*?:\\s*?none\\s*?;\\s*?}/gi), '<code>mixin</code>应该有一个<code>@else</code>语句来将<code>border</code>设置为 none。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #box {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: red;",
            "    @include border-stroke(medium);",
            "  }  ",
            "</style>",
            "",
            "<div id=\"box\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb9",
      "title": "Use @for to Create a Sass Loop",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "你可以在 Sass 中使用<code>@for</code>循环，它的表现类似与 JavaScript 中的<code>for</code>循环。",
        "<code>@for</code>以两种方式使用：\"start through end\" 或 \"start to end\"。主要区别在于“开始结束”<em> 排除 </em> 结束号码，而“开始结束”<em> 包括 </em> 结束号码。",
        "这是一个开始 <b> 到 </b> 结束示例：",
        "<blockquote>@for $i from 1 through 12 {<br>&nbsp;&nbsp;.col-#{$i} { width: 100%/12 * $i; }<br>}</blockquote>",
        "<code>#{$i}</code>部分是将变量（<code>i</code>）与文本组合成字符串的语法。当 Sass 文件转换为 CSS 时，它看起来像这样：",
        "<blockquote>.col-1 {<br>&nbsp;&nbsp;width: 8.33333%;<br>}<br><br>.col-2 {<br>&nbsp;&nbsp;width: 16.66667%;<br>}<br><br>......<br><br>.col-12 {<br>&nbsp;&nbsp;width: 100%;<br>}</blockquote>",
        "这是创建网格布局的有效方法。现在，你有 12 个可用作 CSS classes 的列宽选项。",
        "<hr>",
        "编写<code>@for</code>指令，使<code>$j</code>的值为从 1（包含）到 6（不包含）。",
        "它应该创建 5 个名为<code>.text-1</code>的 classes 到<code>.text-5</code>，其中每个 class 的<code>font-size</code>设置为 2px+10px 乘以索引。"
      ],
      "tests": [
        {
          "text": "你应使用<code>@for</code>指令。",
          "testString": "assert(code.match(/@for /g), '你应使用<code>@for</code>指令。');"
        },
        {
          "text": "<code>.text-1</code>class 的<code>font-size</code>应为 12px。",
          "testString": "assert($('.text-1').css('font-size') == '12px', '<code>.text-1</code>class 的<code>font-size</code>应为 12px。');"
        },
        {
          "text": "<code>.text-2</code>class 的<code>font-size</code>应为22px。",
          "testString": "assert($('.text-2').css('font-size') == '22px', '<code>.text-2</code>class 的<code>font-size</code>应为22px。');"
        },
        {
          "text": "<code>.text-3</code>class 的<code>font-size</code>应为32px。",
          "testString": "assert($('.text-3').css('font-size') == '32px', '<code>.text-3</code>class 的<code>font-size</code>应为32px。');"
        },
        {
          "text": "<code>.text-4</code>class 的<code>font-size</code>应为42px。",
          "testString": "assert($('.text-4').css('font-size') == '42px', '<code>.text-4</code>class 的<code>font-size</code>应为42px。');"
        },
        {
          "text": "<code>.text-5</code>class 的<code>font-size</code>应为52px。",
          "testString": "assert($('.text-5').css('font-size') == '52px', '<code>.text-5</code>class 的<code>font-size</code>应为52px。');"
        },
				{
				  "text": "<code>.text-6</code>class 的<code>font-size</code>应为默认字体大小。",
				  "testString": "assert( $('.text-6').css('font-size') == $('html').css('font-size') , '<code>.text-6</code>class 的<code>font-size</code>应为默认字体大小。');"
				}
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>",
						"<p class=\"text-6\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bba",
      "title": "Use @each to Map Over Items in a List",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "最后一个挑战显示了<code>@for</code>指令如何使用起始值和结束值循环一定次数。Sass 还提供<code>@each</code>指令，该指令循环遍历列表或映射中的每个项目。",
        "在每次迭代时，变量将从列表映射赋值给当前值。",
        "<blockquote>@each $color in blue, red, green {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "map 的语法略有不同。这是一个例子：",
        "<blockquote>$colors: (color1: blue, color2: red, color3: green);<br><br>@each $key, $color in $colors {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "请注意，需要<code>$key</code>变量来引用 map 中的键。否则，编译后的 CSS 将包含<code>color1</code>，<code>color2</code>......",
        "以上两个代码示例都转换为以下 CSS：",
        "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}<br><br>.red-text {<br>&nbsp;&nbsp;color: red;<br>}<br><br>.green-text {<br>&nbsp;&nbsp;color: green;<br>}</blockquote>",
        "<hr>",
        "编写一个<code>@each</code>指令，通过一个列表：<code>blue,black,red</code>并将每个变量分配给<code>.color-bg</code>class, 其中每个项目的“颜色”部分都会发生变化。",
        "每个 class 都应该将<code>background-color</code>设置为相应的颜色。"
      ],
      "tests": [
        {
          "text": "你的代码应使用<code>@each</code>指令。",
          "testString": "assert(code.match(/@each /g), '你的代码应使用<code>@each</code>指令。');"
        },
        {
          "text": "<code>.blue-bg</code>class 背景色应为蓝色。",
          "testString": "assert($('.blue-bg').css('background-color') == 'rgb(0, 0, 255)', '<code>.blue-bg</code>class 背景色应为蓝色。');"
        },
        {
          "text": "<code>.black-bg</code>class 背景色应为黑色。",
          "testString": "assert($('.black-bg').css('background-color') == 'rgb(0, 0, 0)', '<code>.black-bg</code>class 背景色应为黑色。');"
        },
        {
          "text": "<code>.red-bg</code>class 背景色应为红色。",
          "testString": "assert($('.red-bg').css('background-color') == 'rgb(255, 0, 0)', '<code>.red-bg</code>class 背景色应为红色。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  div {",
            "    height: 200px;",
            "    width: 200px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blue-bg\"></div>",
            "<div class=\"black-bg\"></div>",
            "<div class=\"red-bg\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbb",
      "title": "Apply a Style Until a Condition is Met with @while",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 中的<code>@while</code>指令与 JavaScript 中的<code>while</code>类似。只要满足条件，它就会一直创建 CSS 代码。",
        "<code>@for</code>挑战提供了一个创建简单网格系统的示例。这也适用于<code>@while</code>。",
        "<blockquote>$x: 1;<br>@while $x< 13 {<br>&nbsp;&nbsp;.col-#{$x} { width: 100%/12 * $x;}<br>&nbsp;&nbsp;$x: $x + 1;<br>}</blockquote>",
        "首先，定义变量<code>$x</code>并将其设置为 1。接下来，使用<code>@while</code>指令，当<code>$x</code>小于 13 时创建网格系统 。",
        "在设置<code>width</code>的 CSS 规则后，<code>$x</code>增加 1 以避免无限循环。",
        "<hr>",
        "使用<code>@while</code>创建一系列具有不同<code>font-sizes</code>的 class。",
        "从<code>text-1</code>到<code>text-10</code>应该有 10 个不同的 class。然后将<code>font-size</code>设置为 2px+10px 乘以当前索引号。注意不要写成死循环！"
      ],
      "tests": [
        {
          "text": "你的代码应使用<code>@while</code>指令。",
          "testString": "assert(code.match(/@while /g), '你的代码应使用<code>@while</code>指令。');"
        },
        {
          "text": "你的代码应将索引变量设置为 1 才能启动。",
          "testString": "assert(code.match(/\\$.*:\\s*?1;/gi), '你的代码应将索引变量设置为 1 才能启动。');"
        },
        {
          "text": "你的代码应该递增计数器变量。",
          "testString": "assert(code.match(/\\$(.*):\\s*?\\$\\1\\s*?\\+\\s*?1;/gi), '你的代码应该递增计数器变量。');"
        },
        {
          "text": "<code>.text-1</code>class 的<code>font-size</code>应为 12px。",
          "testString": "assert($('.text-1').css('font-size') == '12px', '<code>.text-1</code>class 的<code>font-size</code>应为 12px。');"
        },
        {
          "text": "<code>.text-2</code>class 的<code>font-size</code>应为 22px。",
          "testString": "assert($('.text-2').css('font-size') == '22px', '<code>.text-2</code>class 的<code>font-size</code>应为 22px。');"
        },
        {
          "text": "<code>.text-3</code>class 的<code>font-size</code>应为 32px。",
          "testString": "assert($('.text-3').css('font-size') == '32px', '<code>.text-3</code>class 的<code>font-size</code>应为 32px。');"
        },
        {
          "text": "<code>.text-4</code>class 的<code>font-size</code>应为 42px。",
          "testString": "assert($('.text-4').css('font-size') == '42px', '<code>.text-4</code>class 的<code>font-size</code>应为 42px。');"
        },
        {
          "text": "<code>.text-5</code>class 的<code>font-size</code>应为 52px。",
          "testString": "assert($('.text-5').css('font-size') == '52px', '<code>.text-5</code>class 的<code>font-size</code>应为 52px。');"
        },
        {
          "text": "<code>.text-6</code>class 的<code>font-size</code>应为 62px。",
          "testString": "assert($('.text-6').css('font-size') == '62px', '<code>.text-6</code>class 的<code>font-size</code>应为 62px。');"
        },
        {
          "text": "<code>.text-7</code>class 的<code>font-size</code>应为 72px。",
          "testString": "assert($('.text-7').css('font-size') == '72px', '<code>.text-7</code>class 的<code>font-size</code>应为 72px。');"
        },
        {
          "text": "<code>.text-8</code>class 的<code>font-size</code>应为 82px。",
          "testString": "assert($('.text-8').css('font-size') == '82px', '<code>.text-8</code>class 的<code>font-size</code>应为 82px。');"
        },
        {
          "text": "<code>.text-9</code>class 的<code>font-size</code>应为 92px。",
          "testString": "assert($('.text-9').css('font-size') == '92px', '<code>.text-9</code>class 的<code>font-size</code>应为 92px。');"
        },
        {
          "text": "<code>.text-10</code>class 的<code>font-size</code>应为 102px。",
          "testString": "assert($('.text-10').css('font-size') == '102px', '<code>.text-10</code>class 的<code>font-size</code>应为 102px。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>",
            "<p class=\"text-6\">Hello</p>",
            "<p class=\"text-7\">Hello</p>",
            "<p class=\"text-8\">Hello</p>",
            "<p class=\"text-9\">Hello</p>",
            "<p class=\"text-10\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbc",
      "title": "Split Your Styles into Smaller Chunks with Partials",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 中的<code>Partials</code>是包含 CSS 代码段的单独文件。这些是在其他 Sass 文件中导入和使用的。我们可以把类似代码放到模块中，以保持代码结构规整且易于管理。",
        "<code>partials</code>的名称以下划线（<code>_</code>）字符开头，告诉 Sass 它是 CSS 的一小部分，而不是将其转换为 CSS 文件。此外，Sass 文件以<code>.scss</code>文件扩展名结尾。要将<code>partial</code>中的代码放入另一个 Sass 文件中，请使用<code>@import</code>指令。",
        "例如，如果所有<code>mixins</code>都保存在名为 \"_mixins.scss \" 的<code>partial</code>中，并且在\"main.scss \"文件中需要它们，这是如何在主文件中使用它们：",
        "<blockquote>// In the main.scss file<br><br>@import 'mixins'</blockquote>",
        "请注意，<code>import</code>语句中不需要下划线——Sass 知道它是<code>partial</code>。将<code>partial</code>导入文件后，可以使用所有变量<code>mixins</code>和其他代码。",
        "<hr>",
        "编写<code>@import</code>语句，将名为<code>_variables.scss</code>的<code>partial</code>导入 main.scss 文件。"
      ],
      "tests": [
        {
          "text": "你的代码应使用<code>@import</code>指令，并且不应在文件名中包含下划线。",
          "testString": "assert(code.match(/@import\\s+?('|\")variables\\1/gi), '你的代码应使用<code>@import</code>指令，并且不应在文件名中包含下划线。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "// The main.scss file",
            "",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7fa5367417b2b2512bbd",
      "title": "Extend One Set of CSS Styles to Another Element",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 有一个名为<code>extend</code>的功能，可以很容易地从一个元素中借用 CSS 规则并在另一个元素上重用它们。",
        "例如，下面的 CSS 规则块设置了<code>.panel</code>class 的样式。它有<code>background-color</code>，<code>height</code>和<code>border</code>。",
        "<blockquote>.panel{<br>&nbsp;&nbsp;background-color: red;<br>&nbsp;&nbsp;height: 70px;<br>&nbsp;&nbsp;border: 2px solid green;<br>}</blockquote>",
        "现在你需要另一个名为<code>.big-panel</code>的面板。它具有与<code>.panel</code>相同的基本属性，但还需要<code>width</code>和<code>font-size</code>。",
        "可以从<code>.panel</code>复制并粘贴初始 CSS 规则，但是当你添加更多类型的面板时，代码会变得重复。",
        "<code>extend</code>指令是一种重用为一个元素编写的规则的简单方法，然后为另一个元素添加更多：",
        "<blockquote>.big-panel{<br>&nbsp;&nbsp;@extend .panel;<br>&nbsp;&nbsp;width: 150px;<br>&nbsp;&nbsp;font-size: 2em;<br>}</blockquote>",
        "除了新样式之外，<code>.big-panel</code>将具有与<code>.panel</code>相同的属性。",
        "<hr>",
        "创建一个扩展<code>.info</code>的 class<code>.info-important</code>，并将<code>background-color</code>设置为洋红色。"
      ],
      "tests": [
        {
          "text": "<code>info-important</code>class 应该将<code>background-color</code>设置为<code>magenta</code>。",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*background-color\\s*?:\\s*?magenta\\s*?;[\\s\\S]*}/gi), '<code>info-important</code>class 应该将<code>background-color</code>设置为<code>magenta</code>。');"
        },
        {
          "text": "<code>info-important</code>class 应使用<code>@extend</code>继承<code>info</code>class 的样式。",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*@extend\\s*?.info\\s*?;[\\s\\S]*/gi), '<code>info-important</code>class 应使用<code>@extend</code>继承<code>info</code>class 的样式。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  h3{",
            "    text-align: center;",
            "  }",
            "  .info{",
            "    width: 200px;",
            "    border: 1px solid black;",
            "    margin: 0 auto;",
            "  }",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<h3>Posts</h3>",
            "<div class=\"info-important\">",
            "  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>",
            "</div>",
            "",
            "<div class=\"info\">",
            "  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}
