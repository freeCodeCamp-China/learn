{
  "name": "Basic CSS",
  "order": 1,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "bad87fee1348bd9aedf08803",
      "title": "Change the Color of Text",
      "description": [
        "现在让我们来修改一下文本的颜色。",
        "我们通过修改<code>h2</code>元素的<code>style</code>属性的<code>color</code>值来改变文本颜色。",
        "以下是改变<code>h2</code>元素为蓝色的方法：",
        "<code>&#60;h2 style=\"color: blue;\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
        "请注意行内<code>style</code>最好以<code>;</code>来结束。",
        "<hr>",
        "请把<code>h2</code>元素的文本颜色设置为红色。"
      ],
      "tests": [
        {
          "text": "<code>h2</code>元素应该为红色。",
          "testString": "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", '<code>h2</code>元素应该为红色。');"
        },
        {
          "text": "<code>h2</code>元素的<code>style</code>属性值应该以<code>;</code>结束。",
          "testString": "assert(code.match(/<h2\\s+style\\s*=\\s*(\\'|\")\\s*color\\s*:\\s*(?:rgb\\(\\s*255\\s*,\\s*0\\s*,\\s*0\\s*\\)|rgb\\(\\s*100%\\s*,\\s*0%\\s*,\\s*0%\\s*\\)|red|#ff0000|#f00|hsl\\(\\s*0\\s*,\\s*100%\\s*,\\s*50%\\s*\\))\\s*\\;(\\'|\")>\\s*CatPhotoApp\\s*<\\/h2>/),'<code>h2</code>元素的<code>style</code>属性值应该以<code>;</code>结束。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08805",
      "title": "Use CSS Selectors to Style Elements",
      "description": [
        "在 CSS 中，页面样式的属性有几百个，但常用的不过几十个。",
        "通过行内样式<code>&#60;h2 style=\"color: red;\"&#62;CatPhotoApp&#60;/h2&#62;</code>，就可以修改<code>h2</code>元素的颜色为红色。",
        "当我们只需要改变元素的某个样式时，行内样式最简单直观。当我们需要同时改变元素的很多样式时，<code>层叠样式表</code>往往是一个更好的选择。",
        "在代码的顶部，创建一个<code>style</code>声明区域，如下方所示：",
        "<blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote>",
        "在<code>style</code>样式声明区域内，可以创建一个<code>元素选择器</code>，应用于所有的<code>h2</code>元素。例如，如果你想所有<code>h2</code>元素变成红色，可以添加下方的样式规则：",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote>",
        "注意，在每个元素的样式声明区域里，左右花括号（<code>{</code> 和 <code>}</code>）一定要写全。你需要确保所有样式规则位于花括号之间，并且每条样式规则都以分号结束。",
        "<hr>",
        "删除<code>h2</code>元素的行内样式，然后创建<code>style</code>样式声明区域，最后添加 CSS 样式规则使<code>h2</code>元素变为蓝色。"
      ],
      "tests": [
        {
          "text": "删除<code>h2</code>元素的行内样式。",
          "testString": "assert(!$(\"h2\").attr(\"style\"), '删除<code>h2</code>元素的行内样式。');"
        },
        {
          "text": "创建一个<code>style</code>样式声明区域。",
          "testString": "assert($(\"style\") && $(\"style\").length > 1, '创建一个<code>style</code>样式声明区域。');"
        },
        {
          "text": "<code>h2</code>元素颜色应为蓝色。",
          "testString": "assert($(\"h2\").css(\"color\") === \"rgb(0, 0, 255)\", '<code>h2</code>元素颜色应为蓝色。');"
        },
        {
          "text": "确保<code>h2</code>选择器的内容被花括号所围绕，并且样式规则以分号结束。",
          "testString": "assert(code.match(/h2\\s*\\{\\s*color\\s*:.*;\\s*\\}/g), '确保<code>h2</code>选择器的内容被花括号所围绕，并且样式规则以分号结束。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<h2 style=\"color: red;\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aecf08806",
      "title": "Use a CSS Class to Style an Element",
      "description": [
        "CSS 的<code>class</code>具有可重用性，可应用于各种 HTML 元素。",
        "一个 CSS<code>class</code>声明示例，如下所示：",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "可以看到，我们在<code>&#60;style&#62;</code>样式声明区域里，创建了一个名为<code>blue-text</code>的<code>class</code>选择器。",
        "你可以将 CSS<code>class</code>选择器应用到一个HTML元素里，如下所示：",
        "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
        "注意：在<code>style</code>样式区域声明里，<code>class</code>需以<code>.</code>开头。而在 HTML 元素里，<code>class</code>属性的前面不能添加<code>.</code>。",
        "<hr>",
        "在<code>style</code>样式声明里，把<code>h2</code>元素选择器改为<code>.red-text</code>class 选择器，同时将颜色<code>blue</code>变为<code>red</code>。",
        "在<code>h2</code>元素里，添加一个<code>class</code>属性，且值为<code>'red-text'</code>。"
      ],
      "tests": [
        {
          "text": "<code>h2</code>元素应该为红色。",
          "testString": "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", '<code>h2</code>元素应该为红色。');"
        },
        {
          "text": "<code>h2</code>元素应含有<code>red-text</code> class 选择器。",
          "testString": "assert($(\"h2\").hasClass(\"red-text\"), '<code>h2</code>元素应含有<code>red-text</code> class 选择器。');"
        },
        {
          "text": "<code>style</code>样式声明区域里应该包含一个<code>red-text</code> class 选择器，并且它的颜色应为红色。",
          "testString": "assert(code.match(/\\.red-text\\s*\\{\\s*color\\s*:\\s*red;\\s*\\}/g), '<code>style</code>样式声明区域里应该包含一个<code>red-text</code> class 选择器，并且它的颜色应为红色。');"
        },
        {
          "text": "不要在<code>h2</code>元素里使用行内样式：<code>style=\"color&#58; red\"</code>。",
          "testString": "assert($(\"h2\").attr(\"style\") === undefined, '不要在<code>h2</code>元素里使用行内样式：<code>style=\"color&#58; red\"</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h2 {",
            "    color: blue;",
            "  }",
            "</style>",
            "",
            "<h2>CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aefe08806",
      "title": "Style Multiple Elements with a CSS Class",
      "description": [
        "通过 CSS class 选择器，多个 HTML 元素可以使用相同的 CSS 样式规则。你可以将<code>red-text</code>class 选择器应用在第一个<code>p</code>元素上。"
      ],
      "tests": [
        {
          "text": "<code>h2</code>元素应该是红色的。",
          "testString": "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", '<code>h2</code>元素应该是红色的。');"
        },
        {
          "text": "<code>h2</code>元素应该含有<code>red-text</code> class 选择器。",
          "testString": "assert($(\"h2\").hasClass(\"red-text\"), '<code>h2</code>元素应该含有<code>red-text</code> class 选择器。');"
        },
        {
          "text": "第一个<code>p</code>元素应该为红色。",
          "testString": "assert($(\"p:eq(0)\").css(\"color\") === \"rgb(255, 0, 0)\", '第一个<code>p</code>元素应该为红色。');"
        },
        {
          "text": "第二和第三个<code>p</code>元素不应该为红色。",
          "testString": "assert(!($(\"p:eq(1)\").css(\"color\") === \"rgb(255, 0, 0)\") && !($(\"p:eq(2)\").css(\"color\") === \"rgb(255, 0, 0)\"), '第二和第三个<code>p</code>元素不应该为红色。');"
        },
        {
          "text": "第一个<code>p</code>元素应该包含<code>red-text</code> class 选择器。",
          "testString": "assert($(\"p:eq(0)\").hasClass(\"red-text\"), '第一个<code>p</code>元素应该包含<code>red-text</code> class 选择器。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  <p>点击这里可以获取更多<a href=\"http://freecatphotoapp.com\" target=\"_blank\">猫图</a>。</p>",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08806",
      "title": "Change the Font Size of an Element",
      "description": [
        "字体大小由<code>font-size</code>属性控制，如下所示：",
        "<blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote>",
        "<hr>",
        "在包含<code>red-text</code>class 选择器的<code>&#60;style&#62;</code>声明区域的里，创建一个<code>p</code>元素样式规则，并设置<code>font-size</code>为<code>16px</code>。"
      ],
      "tests": [
        {
          "text": "在<code>style</code>样式声明区域里，<code>p</code>元素的<code>font-size</code>的值应为<code>16px</code>，浏览器和文本缩放应设置为 100％。",
          "testString": "assert(code.match(/p\\s*{\\s*font-size\\s*:\\s*16\\s*px\\s*;\\s*}/i), '在<code>style</code>样式声明区域里，<code>p</code>元素的<code>font-size</code>的值应为<code>16px</code>，浏览器和文本缩放应设置为 100％。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08807",
      "title": "Set the Font Family of an Element",
      "description": [
        "通过<code>font-family</code>属性，可以设置元素里面的字体样式。",
        "如果你想设置<code>h2</code>元素的字体为<code>sans-serif</code>，你可以用以下的 CSS 规则：",
        "<blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote>",
        "<hr>",
        "确保<code>p</code>元素使用<code>monospace</code>字体。"
      ],
      "tests": [
        {
          "text": "<code>p</code>元素应该使用<code>monospace</code>字体。",
          "testString": "assert($(\"p\").not(\".red-text\").css(\"font-family\").match(/monospace/i), '<code>p</code>元素应该使用<code>monospace</code>字体。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08807",
      "title": "Import a Google Font",
      "description": [
        "除了大多数系统提供的默认字体以外，我们也可以使用自定义字体。网络上有各种各样的字体，不过在这个例子中，我们将会尝试使用<code>Google</code>字体库。",
        "<a href='https://fonts.google.com/' target='_blank'>Google 字体</a>是一个免费的字体库，可以通过在 CSS 里面设置字体的 URL 来引用。",
        "因此，下一步，我们将引入和使用<code>Google</code>字体。",
        "引入<code>Google</code>字体，你需要复制<code>Google</code>字体的 URL，并粘贴到你的 HTML 里面。在这个挑战中，我们需要引入<code>Lobster</code>字体。因此，请复制以下代码段，并粘贴到代码编辑器顶部，即放到<code>style</code>标签之前。",
        "<code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code>",
        "现在你可以设置<code>font-family</code>属性为<code>Lobster</code>，来使用<code>Lobster</code>字体。例子如下：<br><code>font-family: FAMILY_NAME, GENERIC_NAME;</code>.",
        "<code>GENERIC_NAME</code>是可选的，其他字体不可用时便作为后备字体，在下一个挑战中可以得到体现。",
        "字体名区分大小写，并且如果字体名含有空格，需要用引号括起来。例如，使用<code>\"Open Sans\"</code>字体需要添加引号，而<code>Lobster</code>字体则不需要。",
        "<hr>",
        "创建一个 CSS 规则，<code>font-family</code>属性里设置为<code>Lobster</code>字体，并把这个字体应用到所有的<code>h2</code>元素。"
      ],
      "tests": [
        {
          "text": "引入<code>Lobster</code>字体。",
          "testString": "assert(new RegExp(\"gdgdocs|googleapis\", \"gi\").test(code), '引入<code>Lobster</code>字体。');"
        },
        {
          "text": "<code>h2</code>元素必须使用<code>Lobster</code>字体。",
          "testString": "assert($(\"h2\").css(\"font-family\").match(/lobster/i), '<code>h2</code>元素必须使用<code>Lobster</code>字体。');"
        },
        {
          "text": "使用<code>h2</code>选择器去改变字体样式。",
          "testString": "assert(/\\s*h2\\s*\\{\\s*font-family\\:\\s*(\\'|\")?Lobster(\\'|\")?\\s*;\\s*\\}/gi.test(code), '使用<code>h2</code>选择器去改变字体样式。');"
        },
        {
          "text": "<code>p</code>元素应该保持使用<code>monospace</code>字体。",
          "testString": "assert($(\"p\").css(\"font-family\").match(/monospace/i), '<code>p</code>元素应该保持使用<code>monospace</code>字体。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08808",
      "title": "Specify How Fonts Should Degrade",
      "description": [
        "所有浏览器都有几种默认字体。这些通用字体包括<code>monospace</code>，<code>serif</code>和<code>sans-serif</code>。",
        "当字体不可用，你可以告诉浏览器通过 “降级” 去使用其他字体。",
        "例如，如果你想将一个元素的字体设置成<code>Helvetica</code>，当<code>Helvetica</code>不可用时，降级使用<code>sans-serif</code>字体，那么可以这样写：",
        "<blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote>",
        "通用字体名字不区分大小写。同时，也不需要使用引号，因为它们是 CSS 关键字。",
        "<hr>",
        "首先，添加<code>monospace</code>字体到<code>h2</code>元素里，它现在拥有着<code>Lobster</code>和<code>monospace</code>两种字体。",
        "在上一个挑战里，你已经通过<code>link</code>标签引入谷歌<code>Lobster</code>字体。现在让我们注释掉谷歌<code>Lobster</code>字体的引入（使用我们之前学过的<code>HTML</code>注释），使字体失效。你会发现你的<code>h2</code>元素降级到了<code>monospace</code>字体。",
        "<strong>注意：</strong><br>如果你的电脑已经安装了<code>Lobster</code>字体，你将看不到这个降级过程，因为你的浏览器会找到该字体。"
      ],
      "tests": [
        {
          "text": "<code>h2</code>元素应该含有<code>Lobster</code>字体。",
          "testString": "assert($(\"h2\").css(\"font-family\").match(/^\"?lobster/i), '<code>h2</code>元素应该含有<code>Lobster</code>字体。');"
        },
        {
          "text": "当<code>Lobster</code>字体失效时，<code>h2</code>元素应该降级使用<code>monospace</code>字体。",
          "testString": "assert(/\\s*h2\\s*\\{\\s*font-family\\:\\s*(\\'|\")?Lobster(\\'|\")?,\\s*monospace\\s*;\\s*\\}/gi.test(code), '当<code>Lobster</code>字体失效时，<code>h2</code>元素应该降级使用<code>monospace</code>字体。');"
        },
        {
          "text": "通过添加<code>&#60!--</code>，注释掉谷歌<code>Lobster</code>字体的引入。",
          "testString": "assert(new RegExp(\"<!--[^fc]\", \"gi\").test(code), '通过添加<code>&#60!--</code>，注释掉谷歌<code>Lobster</code>字体的引入。');"
        },
        {
          "text": "确保注释要以<code>--&#62;</code>结束。",
          "testString": "assert(new RegExp(\"[^fc]-->\", \"gi\").test(code), '确保注释要以<code>--&#62;</code>结束。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9acdf08812",
      "title": "Size Your Images",
      "description": [
        "CSS 的<code>width</code>属性可以控制元素的宽度。图片的<code>width</code>宽度类似于字体的<code>px</code>（像素)值。",
        "假如，你想创建一个叫<code>larger-image</code>的 CSS class 来控制 HTML 元素的宽度为 500px，我们可以这样做：",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "<hr>",
        "创建一个<code>smaller-image</code>的 CSS class，设置图片的宽度为 100px。",
        "<strong>注意：</strong><br>由于不同浏览器的差异性，你可能需要将浏览器缩放到 100% 来通过该挑战。"
      ],
      "tests": [
        {
          "text": "<code>img</code>元素应该含有<code>smaller-image</code> class。",
          "testString": "assert($(\"img[src='http://cdn.freecodecamp.cn/relaxing-cat.jpg']\").attr('class') === \"smaller-image\", '<code>img</code>元素应该含有<code>smaller-image</code> class。');"
        },
        {
          "text": "图片宽度应为 100px（像素），且浏览器缩放应为默认 100%。",
          "testString": "assert($(\"img\").width() === 100, '你的图片应为 100px（像素），且浏览器缩放应为默认 100%。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9bedf08813",
      "title": "Add Borders Around Your Elements",
      "description": [
        "CSS 边框具有<code>style</code>，<code>color</code>和<code>width</code>属性。",
        "假如，我们想要创建一个 5px 的红色实线边框包围一个 HTML 元素，我们可以这样做：",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "<hr>",
        "创建一个<code>thick-green-border</code> CSS class，该 class 应在 HTML 元素周围添加一个 10px 的绿色实线边框，将它应用在你的猫咪照片上。",
        "记得，在一个元素上可以同时应用多个<code>class</code>，通过使用空格来分隔。例子如下：",
        "<code>&lt;img class=\"class1 class2\"&gt;</code>"
      ],
      "tests": [
        {
          "text": "你的<code>img</code>元素应该含有<code>smaller-image</code> class。",
          "testString": "assert($(\"img\").hasClass(\"smaller-image\"), '你的<code>img</code>元素应该含有<code>smaller-image</code> class。');"
        },
        {
          "text": "同时，你的<code>img</code>元素应该含有<code>thick-green-border</code> class。",
          "testString": "assert($(\"img\").hasClass(\"thick-green-border\"), '同时，你的<code>img</code>元素应该含有<code>thick-green-border</code> class。');"
        },
        {
          "text": "设置你的图片边框为<code>10px</code>。",
          "testString": "assert($(\"img\").hasClass(\"thick-green-border\") && parseInt($(\"img\").css(\"border-top-width\"), 10) >= 8 && parseInt($(\"img\").css(\"border-top-width\"), 10) <= 12, '设置你的图片边框为<code>10px</code>。');"
        },
        {
          "text": "设置你的图片边框为<code>solid</code>实线。",
          "testString": "assert($(\"img\").css(\"border-right-style\") === \"solid\", '设置你的图片边框为<code>solid</code>实线。');"
        },
        {
          "text": "<code>img</code>元素的边框颜色应该为绿色。",
          "testString": "assert($(\"img\").css(\"border-left-color\") === \"rgb(0, 128, 0)\", '<code>img</code>元素的边框颜色应该为绿色。');"
        }
      ],
      "challengeType": 0,
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-borders-around-your-elements",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08814",
      "title": "Add Rounded Corners with border-radius",
      "description": [
        "你的猫咪图片边角很尖锐，我们可以使用<code>border-radius</code>属性来让它变得圆润。",
        "<hr>",
        "<code>border-radius</code>可以用<code>px</code>像素单位来赋值。给你的猫咪图片设置 10px 的<code>border-radius</code>。",
        "注意：这个挑战有多个解决方法。例如，添加<code>border-radius</code>属性到<code>.thick-green-border</code>class 或<code>.smaller-image</code>class 里都是可行的。"
      ],
      "tests": [
        {
          "text": "你的图片元素应具有 \"thick-green-border\" class 属性。",
          "testString": "assert($(\"img\").hasClass(\"thick-green-border\"), '你的图片元素应具有 \"thick-green-border\" class 属性。');"
        },
        {
          "text": "你的图片应含有<code>10px</code>的边框圆角。",
          "testString": "assert(parseInt($(\"img\").css(\"border-top-left-radius\")) > 8, '你的图片应含有<code>10px</code>的边框圆角。');"
        }
      ],
      "challengeType": 0,
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-rounded-corners-a-border-radius",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08815",
      "title": "Make Circular Images with a border-radius",
      "description": [
        "除像素外，你也可以使用百分比来指定<code>border-radius</code>的值。",
        "<hr>",
        "将<code>border-radius</code>的值设置为<code>50%</code>。"
      ],
      "tests": [
        {
          "text": "你图片的边框圆角应设置为<code>50%</code>，让它看起来就像一个完整的圆。",
          "testString": "assert(parseInt($(\"img\").css(\"border-top-left-radius\")) > 48, '你图片的边框圆角应设置为<code>50%</code>，让它看起来就像一个完整的圆。');"
        },
        {
          "text": "请确保百分值为<code>50%</code>。",
          "testString": "assert(code.match(/50%/g), '请确保百分值为<code>50%</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 10px;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <p>猫咪最喜欢的三件东西：</p>",
            "  <ul>",
            "    <li>猫薄荷</li>",
            "    <li>激光笔</li>",
            "    <li>千层饼</li>",
            "  </ul>",
            "  <p>猫咪最讨厌的三件东西：</p>",
            "  <ol>",
            "    <li>跳蚤</li>",
            "    <li>打雷</li>",
            "    <li>同类</li>",
            "  </ol>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fed1348bd9aede07836",
      "title": "Give a Background Color to a div Element",
      "description": [
        "<code>background-color</code>属性可以设置元素的背景颜色。",
        "例如，你想将一个元素的背景颜色改为<code>green</code>，可以在你的<code>style</code>里面这样写：",
        "<blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
        "<hr>",
        "创建一个<code>silver-background</code>class 并设置<code>background-color</code>为<code>silver</code>。 并用在<code>div</code>元素上。"
      ],
      "tests": [
        {
          "text": "<code>div</code>元素应有<code>silver-background</code> class。",
          "testString": "assert($(\"div\").hasClass(\"silver-background\"), '<code>div</code>元素应有<code>silver-background</code> class。');"
        },
        {
          "text": "<code>div</code>元素背景颜色应设置为<code>silver</code>。",
          "testString": "assert($(\"div\").css(\"background-color\") === \"rgb(192, 192, 192)\", '<code>div</code>元素背景颜色应设置为<code>silver</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <div>",
            "    <p>猫咪最喜欢的三件东西：</p>",
            "    <ul>",
            "      <li>猫薄荷</li>",
            "      <li>激光笔</li>",
            "      <li>千层饼</li>",
            "    </ul>",
            "    <p>猫咪最讨厌的三件东西：</p>",
            "    <ol>",
            "      <li>跳蚤</li>",
            "      <li>打雷</li>",
            "      <li>同类</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87eee1348bd9aede07836",
      "title": "Set the id of an Element",
      "description": [
        "除了class属性，每一个 HTML 元素也都有<code>id</code>属性。",
        "使用<code>id</code>有几个好处：你可以通过<code>id</code>选择器来改变单个元素的样式，稍后的课程中，你也会了解到在 JavaScript 里面，可以通过<code>id</code>来选择元素和操作元素。",
        "<code>id</code>属性应是唯一的。浏览器不强迫执行这规范，但是这是广泛认可的最佳实践。所以，请不要给多个元素设置相同的<code>id</code>属性。",
        "设置<code>h2</code>元素的 id 为<code>cat-photo-app</code>的方法如下：",
        "<code>&#60;h2 id=\"cat-photo-app\"></code>",
        "<hr>",
        "设置<code>form</code>元素的 id 为<code>cat-photo-form</code>。"
      ],
      "tests": [
        {
          "text": "你的<code>form</code>元素的 id 应为<code>cat-photo-form</code>。",
          "testString": "assert($(\"form\").attr(\"id\") === \"cat-photo-form\", '你的<code>form</code>元素的 id 应为<code>cat-photo-form</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "",
            "  .silver-background {",
            "    background-color: silver;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <div class=\"silver-background\">",
            "    <p>猫咪最喜欢的三件东西：</p>",
            "    <ul>",
            "      <li>猫薄荷</li>",
            "      <li>激光笔</li>",
            "      <li>千层饼</li>",
            "    </ul>",
            "    <p>猫咪最讨厌的三件东西：</p>",
            "    <ol>",
            "      <li>跳蚤</li>",
            "      <li>打雷</li>",
            "      <li>同类</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87dee1348bd9aede07836",
      "title": "Use an id Attribute to Style an Element",
      "description": [
        "通过<code>id</code>属性，你可以做一些很酷的事情，例如，就像 class 一样，你可以使用 CSS 来设置他们的样式",
        "可是，<code>id</code>不可以重用，只应用于一个元素上。同时，在 CSS 里，<code>id</code>的优先级要高于<code>class</code>，如果一个元素同时应用了<code>class</code>和<code>id</code>，并设置样式有冲突，会优先应用<code>id</code>的样式。",
        "选择<code>id</code>为<code>cat-photo-element</code>的元素，并设置它的背景样式为<code>green</code>，可以在你的<code>style</code>标签里这样写：",
        "<blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
        "注意在<code>style</code>标签里，声明 class 的时候必须在名字前插入<code>.</code>符号。同样，在声明 id 的时候，也必须在名字前插入<code>#</code>符号。",
        "<hr>",
        "尝试给含有<code>cat-photo-form</code>id属性的<code>form</code>表单的背景颜色设置为<code>green</code>。"
      ],
      "tests": [
        {
          "text": "设置<code>form</code>元素的 id 为<code>cat-photo-form</code>。",
          "testString": "assert($(\"form\").attr(\"id\") === \"cat-photo-form\", '设置<code>form</code>元素的 id 为<code>cat-photo-form</code>。');"
        },
        {
          "text": "你的<code>form</code>元素应该含有<code>background-color</code>css 属性并且值为 <code>green</code>。",
          "testString": "assert($(\"#cat-photo-form\").css(\"background-color\") === \"rgb(0, 128, 0)\", '你的<code>form</code>元素应该含有<code>background-color</code>css 属性并且值为 <code>green</code>。');"
        },
        {
          "text": "确保你的<code>form</code>元素含有<code>id</code>属性。",
          "testString": "assert(code.match(/<form.*cat-photo-form.*>/gi) && code.match(/<form.*cat-photo-form.*>/gi).length > 0, '确保你的<code>form</code>元素含有<code>id</code>属性。');"
        },
        {
          "text": "不要在<code>form</code>元素上添加其他<code>class</code>属性或者<code>style</code>行内样式。",
          "testString": "assert(!code.match(/<form.*style.*>/gi) && !code.match(/<form.*class.*>/gi), '不要在<code>form</code>元素上添加其他<code>class</code>属性或者<code>style</code>行内样式。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "",
            "  .silver-background {",
            "    background-color: silver;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <div class=\"silver-background\">",
            "    <p>猫咪最喜欢的三件东西：</p>",
            "    <ul>",
            "      <li>猫薄荷</li>",
            "      <li>激光笔</li>",
            "      <li>千层饼</li>",
            "    </ul>",
            "    <p>猫咪最讨厌的三件东西：</p>",
            "    <ol>",
            "      <li>跳蚤</li>",
            "      <li>打雷</li>",
            "      <li>同类</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad88fee1348bd9aedf08825",
      "title": "Adjust the Padding of an Element",
      "description": [
        "我们先暂时把猫咪图片放在一边，让我们去学习更多 HTML 相关样式。",
        "你可能已经注意到了，所有的 HTML 元素基本都是以矩形为基础。",
        "每个 HTML 元素周围的矩形空间由三个重要的属性来控制：<code>padding（内边距）</code>，<code>margin（外边距）</code>和<code>border（边框）</code>。",
        "<code>padding</code>控制着元素内容与<code>border</code>之间的空隙大小。",
        "在这里，我们可以看到蓝色盒子和红色盒子都在黄色盒子里面。可以发现，红色盒子比蓝色盒子有着更多的<code>padding</code>填充空间。",
        "当你增加蓝色盒子的<code>padding</code>值，文本内容与边框的距离会逐渐拉大。",
        "<hr>",
        "蓝色的盒子<code>padding</code>的值要跟红色盒子的一样大小。"
      ],
      "tests": [
        {
          "text": "你的<code>blue-box</code> class 的<code>padding</code>值应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-top\") === \"20px\", '你的<code>blue-box</code> class 的<code>padding</code>值应为<code>20px</code>。');"
        }
      ],
      "challengeType": 0,
      "guideUrl": "https://guide.freecodecamp.org/certificates/adjust-the-padding-of-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08822",
      "title": "Adjust the Margin of an Element",
      "description": [
        "<code>margin（外边距）</code>控制元素的边框与其他元素之间的距离。",
        "在这里，我们可以看到蓝色盒子和红色盒子都在黄色盒子里。请注意，红色盒子的<code>margin</code>值要比蓝色盒子的大，让它看起来比蓝色盒子要小。",
        "当你增加蓝色的<code>margin</code>值，它会增加元素边框到其他周围元素的距离。",
        "<hr>",
        "蓝色的盒子<code>margin</code>的值要跟红色盒子的一样大小。"
      ],
      "tests": [
        {
          "text": "你的<code>blue-box</code> class 的<code>margin</code>值应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"20px\", '你的<code>blue-box</code> class 的<code>margin</code>值应为<code>20px</code>。');"
        }
      ],
      "challengeType": 0,
      "guideUrl": "https://guide.freecodecamp.org/certificates/adjust-the-margin-of-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: 20px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: 10px;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08823",
      "title": "Add a Negative Margin to an Element",
      "description": [
        "元素的<code>margin（外边距）</code>控制元素边框与其他周围元素之间的距离大小。",
        "如果你设置元素<code>margin</code>为负值，元素会变得更大。",
        "<hr>",
        "尝试设置蓝色盒子的<code>margin</code>为负值，跟红色盒子一样大小。",
        "蓝色盒子的<code>margin</code>设置为<code>-15px</code>，它会填满与黄色盒子之间的距离。"
      ],
      "tests": [
        {
          "text": "你的<code>blue-box</code> class的<code>margin</code>应该设置为<code>-15px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"-15px\", '你的<code>blue-box</code> class的<code>margin</code>应该设置为<code>-15px</code>。');"
        }
      ],
      "challengeType": 0,
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-a-negative-margin-to-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: -15px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "    padding: 20px;",
            "    margin: 20px;",
            "  }",
            "</style>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08824",
      "title": "Add Different Padding to Each Side of an Element",
      "description": [
        "有时候，你会想给一个元素每个方向的<code>padding</code>都设置成一个特定的值",
        "CSS 允许你使用<code>padding-top</code>，<code>padding-right</code>， <code>padding-bottom</code>和<code>padding-left</code>属性来设置四个不同方向的<code>padding</code>值。",
        "<hr>",
        "蓝色盒子的顶部和左侧的<code>padding</code>值设置为<code>40px</code>，底部和右侧设置为<code>20px</code>。"
      ],
      "tests": [
        {
          "text": "你的<code>blue-box</code> class 的顶部<code>padding</code>（上内边距）值应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-top\") === \"40px\", '你的<code>blue-box</code> class 的顶部<code>padding</code>（上内边距）值应为<code>40px</code>。');"
        },
        {
          "text": "你的<code>blue-box</code> class 的右侧<code>padding</code>（右内边距）值应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-right\") === \"20px\", '你的<code>blue-box</code> class 的右侧<code>padding</code>（右内边距）值应为<code>20px</code>。');"
        },
        {
          "text": "你的<code>blue-box</code> class 的底部<code>padding</code>（下内边距）值应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-bottom\") === \"20px\", '你的<code>blue-box</code> class 的底部<code>padding</code>（下内边距）值应为<code>20px</code>。');"
        },
        {
          "text": "你的<code>blue-box</code> class 的左侧<code>padding</code>（左内边距）值应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-left\") === \"40px\", '你的<code>blue-box</code> class 的左侧<code>padding</code>（左内边距）值应为<code>40px</code>。');"
        }
      ],
      "challengeType": 0,
      "guideUrl": "https://guide.freecodecamp.org/certificates/add-different-padding-to-each-side-of-an-element",
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding-top: 40px;",
            "    padding-right: 20px;",
            "    padding-bottom: 20px;",
            "    padding-left: 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1248bd9aedf08824",
      "title": "Add Different Margins to Each Side of an Element",
      "description": [
        "有时候，你会想给一个元素每个方向的<code>margin</code>都设置成一个特定的值。",
        "CSS 允许你使用<code>margin-top</code>，<code>margin-right</code>，<code>margin-bottom</code>和<code>margin-left</code>属性来设置四个不同方向的<code>margin</code>值。",
        "<hr>",
        "蓝色盒子的顶部和左侧的<code>margin</code>值设置为<code>40px</code>，底部和右侧设置为<code>20px</code>。"
      ],
      "tests": [
        {
          "text": "你的<code>blue-box</code> class 的右侧<code>margin</code>（上外边距）值应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"40px\", '你的<code>blue-box</code> class 的顶部<code>margin</code>（上外边距）值应为<code>40px</code>。');"
        },
        {
          "text": "你的<code>blue-box</code> class 的右侧<code>margin</code>（右外边距）值应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-right\") === \"20px\", '你的<code>blue-box</code> class 的右侧<code>margin</code>（右外边距）值应为<code>20px</code>。');"
        },
        {
          "text": "你的<code>blue-box</code> class 的底部<code>margin</code>（下外边距）值应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-bottom\") === \"20px\", '你的<code>blue-box</code> class 的底部<code>margin</code>（下外边距）值应为<code>20px</code>。');"
        },
        {
          "text": "你的<code>blue-box</code> class 的左侧<code>margin</code>（左外边距）值应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-left\") === \"40px\", '你的<code>blue-box</code> class 的左侧<code>margin</code>（左外边距）值应为<code>40px</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 10px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    margin-top: 40px;",
            "    margin-right: 20px;",
            "    margin-bottom: 20px;",
            "    margin-left: 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08826",
      "title": "Use Clockwise Notation to Specify the Padding of an Element",
      "description": [
        "如果不想每次都要分别声明<code>padding-top</code>，<code>padding-right</code>，<code>padding-bottom</code>和<code>padding-left</code>属性，可以把它们汇总在<code>padding</code>属性里面声明，如下：",
        "<code>padding: 10px 20px 10px 20px;</code>",
        "这四个值按顺时针排序：上，右，下，左，并且设置的效果等同于特定声明每一个方向的<code>padding</code>。",
        "<hr>",
        "按照顺时针顺序，给\".blue-box\" class的上内边距以及左内边距设置为<code>40px</code>，右内边距和下内边距则设置为<code>20px</code>。"
      ],
      "tests": [
        {
          "text": "<code>blue-box</code> class 的上内边距应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-top\") === \"40px\", '<code>blue-box</code> class 的上内边距应为<code>40px</code>。');"
        },
        {
          "text": "<code>blue-box</code> class 的右内边距应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-right\") === \"20px\", '<code>blue-box</code> class 的右内边距应为<code>20px</code>。');"
        },
        {
          "text": "<code>blue-box</code> class 的下内边距应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-bottom\") === \"20px\", '<code>blue-box</code> class 的下内边距应为<code>20px</code>。');"
        },
        {
          "text": "<code>blue-box</code> class 的左内边距应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"padding-left\") === \"40px\", '<code>blue-box</code> class 的左内边距应为<code>40px</code>。');"
        },
        {
          "text": "你应该按照顺时针排序，汇总声明的方式来设置<code>blue-box</code>的<code>padding</code>值。",
          "testString": "assert(!/padding-top|padding-right|padding-bottom|padding-left/.test(code), '你应该按照顺时针排序，汇总声明的方式来设置<code>blue-box</code>的<code>padding</code>值。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9afdf08726",
      "title": "Use Clockwise Notation to Specify the Margin of an Element",
      "description": [
        "让我们再试一次，不过这一次轮到<code>margin</code>了。",
        "同样，每个方向的外边距值可以在<code>margin</code>属性里面汇总声明，来代替分别声明<code>margin-top</code>，<code>margin-right</code>，<code>margin-bottom</code>和<code>margin-left</code>属性的方式，代码如下：",
        "<code>margin: 10px 20px 10px 20px;</code>",
        "这四个值按顺时针排序：上，右，下，左，并且设置的效果等同于特定声明每一个方向的<code>margin</code>。",
        "<hr>",
        "按照顺时针顺序，给\".blue-box\" class的上外边距以及左外边距设置为<code>40px</code>，右外边距和下外边距则设置为<code>20px</code>。"
      ],
      "tests": [
        {
          "text": "<code>blue-box</code> class 的上外边距应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-top\") === \"40px\", '<code>blue-box</code> class 的上外边距应为<code>40px</code>。');"
        },
        {
          "text": "<code>blue-box</code> class 的右外边距应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-right\") === \"20px\", '<code>blue-box</code> class 的右外边距应为<code>20px</code>。');"
        },
        {
          "text": "<code>blue-box</code> class 的下外边距应为<code>20px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-bottom\") === \"20px\", '<code>blue-box</code> class 的下外边距应为<code>20px</code>。');"
        },
        {
          "text": "<code>blue-box</code> class 的左外边距应为<code>40px</code>。",
          "testString": "assert($(\".blue-box\").css(\"margin-left\") === \"40px\", '<code>blue-box</code> class 的左外边距应为<code>40px</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "  ",
            "  .red-box {",
            "    background-color: crimson;",
            "    color: #fff;",
            "    margin: 20px 40px 20px 40px;",
            "  }",
            "",
            "  .blue-box {",
            "    background-color: blue;",
            "    color: #fff;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box blue-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "58c383d33e2e3259241f3076",
      "title": "Use Attribute Selectors to Style Elements",
      "description": [
        "你已经通过设置元素的<code>id</code>和<code>class</code>，来显示你想要的样式，而它们也被分别叫做 ID 选择器和 Class 选择器。另外，也还有其他的 CSS 选择器，可以让我们给特定的元素设置样式。",
        "让我们再次通过猫咪图片项目来练习 CSS 选择器。",
        "在这个挑战里，你会使用<code>[attr=value]</code>属性选择器修改复选框的样式。这个选择器使用特定的属性值来匹配和设置元素样式。例如，下面的代码会改变所有<code>type</code>为<code>radio</code>的元素的外边距。",
        "<blockquote>[type='radio'] {<br>&nbsp;&nbsp;margin: 20px 0px 20px 0px;<br>}</blockquote>",
        "<hr>",
        "使用<code>type</code>属性选择器，尝试改变复选框的上外边距为 10px，下外边距为 15px。"
      ],
      "tests": [
        {
          "text": "使用<code>type</code>属性选择器来匹配复选框。",
          "testString": "assert(code.match(/<style>[\\s\\S]*?\\[type=(\"|')checkbox\\1\\]\\s*?{[\\s\\S]*?}[\\s\\S]*?<\\/style>/gi),'使用<code>type</code>属性选择器来匹配复选框。');"
        },
        {
          "text": "复选框的上外边距应为 10px。",
          "testString": "assert((function() {var count=0; $(\"[type='checkbox']\").each(function() { if($(this).css('marginTop') === '10px') {count++;}});return (count===3)}()),'复选框的上外边距应为 10px。');"
        },
        {
          "text": "复选框的下外边距应为 15px。",
          "testString": "assert((function() {var count=0; $(\"[type='checkbox']\").each(function() { if($(this).css('marginBottom') === '15px') {count++;}});return (count===3)}()),'复选框的下外边距应为 15px。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">",
            "<style>",
            "  .red-text {",
            "    color: red;",
            "  }",
            "",
            "  h2 {",
            "    font-family: Lobster, monospace;",
            "  }",
            "",
            "  p {",
            "    font-size: 16px;",
            "    font-family: monospace;",
            "  }",
            "",
            "  .thick-green-border {",
            "    border-color: green;",
            "    border-width: 10px;",
            "    border-style: solid;",
            "    border-radius: 50%;",
            "  }",
            "",
            "  .smaller-image {",
            "    width: 100px;",
            "  }",
            "",
            "  .silver-background {",
            "    background-color: silver;",
            "  }",
            "</style>",
            "",
            "<h2 class=\"red-text\">CatPhotoApp</h2>",
            "<main>",
            "  ",
            "  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"http://cdn.freecodecamp.cn/relaxing-cat.jpg\" alt=\"一只仰卧着的萌猫\"></a>",
            "  ",
            "  <div class=\"silver-background\">",
            "    <p>猫咪最喜欢的三件东西：</p>",
            "    <ul>",
            "      <li>猫薄荷</li>",
            "      <li>激光笔</li>",
            "      <li>千层饼</li>",
            "    </ul>",
            "    <p>猫咪最讨厌的三件东西：</p>",
            "    <ol>",
            "      <li>跳蚤</li>",
            "      <li>打雷</li>",
            "      <li>同类</li>",
            "    </ol>",
            "  </div>",
            "  ",
            "  <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室内</label>",
            "    <label><input type=\"radio\" name=\"indoor-outdoor\">室外</label><br>",
            "    <label><input type=\"checkbox\" name=\"personality\">忠诚</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">懒惰</label>",
            "    <label><input type=\"checkbox\" name=\"personality\">积极</label><br>",
            "    <input type=\"text\" placeholder=\"猫咪图片地址\" required>",
            "    <button type=\"submit\">提交</button>",
            "  </form>",
            "</main>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad82fee1322bd9aedf08721",
      "title": "Understand Absolute versus Relative Units",
      "description": [
        "最近的几个挑战都是设置元素的内边距和外边距的<code>px</code>值。像素<code>px</code>是一种长度单位，来告诉浏览器应该如何调整元素大小和空间大小。其实除了像素，CSS 也有其他不同的长度单位供我们使用。",
        "单位长度的类型可以分成 2 种，一种是相对的，一种是绝对的。例如，<code>in</code>和<code>mm</code>分别代表着英寸和毫米。绝对长度单位会接近屏幕上的实际测量值，不过不同屏幕的分辨率会存在差异，可能会导致一些误差。",
        "相对单位长度，就像<code>em</code>和<code>rem</code>，它们会依赖其他长度的值。就好像<code>em</code>的大小基于元素的字体的<code>font-size</code>值，如果你使用<code>em</code>单位来设置<code>font-size</code>值，它的值会跟随父元素的<code>font-size</code>值来改变。",
        "<strong>注意：</strong><br>有些单位长度选项是相对视窗大小来改变值的，符合了响应式 web 的设计原则。",
        "<hr>",
        "给<code>red-box</code> class 添加<code>padding</code>属性，并设置为<code>1.5em</code>。"
      ],
      "tests": [
        {
          "text": "<code>red-box</code> class 应该含有<code>padding</code>属性。",
          "testString": "assert($('.red-box').css('padding-top') != '0px' && $('.red-box').css('padding-right') != '0px' && $('.red-box').css('padding-bottom') != '0px' && $('.red-box').css('padding-left') != '0px', '<code>red-box</code> class 应该含有<code>padding</code>属性。');"
        },
        {
          "text": "<code>red-box</code> class 的<code>padding</code>值应为 1.5em。",
          "testString": "assert(code.match(/\\.red-box\\s*?{\\s*?.*?\\s*?.*?\\s*?padding:\\s*?1\\.5em/gi), '<code>red-box</code> class 的<code>padding</code>值应为 1.5em。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .injected-text {",
            "    margin-bottom: -25px;",
            "    text-align: center;",
            "  }",
            "",
            "  .box {",
            "    border-style: solid;",
            "    border-color: black;",
            "    border-width: 5px;",
            "    text-align: center;",
            "  }",
            "",
            "  .yellow-box {",
            "    background-color: yellow;",
            "    padding: 20px 40px 20px 40px;",
            "  }",
            "",
            "  .red-box {",
            "    background-color: red;",
            "    margin: 20px 40px 20px 40px;",
            "    ",
            "  }",
            "",
            "  .green-box {",
            "    background-color: green;",
            "    margin: 40px 20px 20px 40px;",
            "  }",
            "</style>",
            "<h5 class=\"injected-text\">margin</h5>",
            "",
            "<div class=\"box yellow-box\">",
            "  <h5 class=\"box red-box\">padding</h5>",
            "  <h5 class=\"box green-box\">padding</h5>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08736",
      "title": "Style the HTML Body Element",
      "description": [
        "现在让我们来讨论一下 CSS 继承。",
        "每一个 HTML 页面都含有一个<code>body</code>元素。",
        "<hr>",
        "我们可以通过设置<code>background-color</code>为<code>black</code>，来证明<code>body</code>元素的存在。",
        "添加以下的代码到<code>style</code>标签里面：",
        "<blockquote>body {<br>&nbsp;&nbsp;background-color: black;<br>}</blockquote>"
      ],
      "tests": [
        {
          "text": "<code>body</code>元素的<code>background-color</code>应该是黑色的。",
          "testString": "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", '<code>body</code>元素的<code>background-color</code>应该是黑色的。');"
        },
        {
          "text": "确保你的 CSS 规则格式书写正确，需要开关大括号。",
          "testString": "assert(code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i), '确保你的 CSS 规则格式书写正确，需要开关大括号。');"
        },
        {
          "text": "确保你的 CSS 规则要以分号结尾。",
          "testString": "assert(code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i), '确保你的 CSS 规则要以分号结尾。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08746",
      "title": "Inherit Styles from the Body Element",
      "description": [
        "我们已经证明每一个 HTML 页面都含有<code>body</code>元素，<code>body</code>元素也可以使用 CSS 样式。",
        "设置<code>body</code>元素的样式的方式跟设置其他 HTML 元素的样式一样，并且其他元素也会继承到<code>body</code>设置的样式。",
        "<hr>",
        "首先，创建一个文本内容为<code>Hello World</code>的<code>h1</code>标签元素。",
        "接着，在<code>body</code>CSS 规则里面添加一句<code>color: green;</code>，改变页面其他元素的字体颜色为<code>green（绿色）</code>。",
        "最后，同样在<code>body</code>CSS 规则里面添加<code>font-family: monospace;</code>，设置其他元素字体为<code>font-family: monospace;</code>。"
      ],
      "tests": [
        {
          "text": "创建一个<code>h1</code>元素。",
          "testString": "assert(($(\"h1\").length > 0), '创建一个<code>h1</code>元素。');"
        },
        {
          "text": "<code>h1</code>元素的文本内容应该为<code>Hello World</code>。",
          "testString": "assert(($(\"h1\").length > 0 && $(\"h1\").text().match(/hello world/i)), '<code>h1</code>元素的文本内容应该为<code>Hello World</code>。');"
        },
        {
          "text": "确保你的<code>h1</code>元素具有结束标记。",
          "testString": "assert(code.match(/<\\/h1>/g) && code.match(/<h1/g) && code.match(/<\\/h1>/g).length === code.match(/<h1/g).length, '确保你的<code>h1</code>元素具有结束标记。');"
        },
        {
          "text": "<code>body</code>元素的<code>color</code>属性值应为<code>green</code>。",
          "testString": "assert(($(\"body\").css(\"color\") === \"rgb(0, 128, 0)\"), '<code>body</code>元素的<code>color</code>属性值应为<code>green</code>。');"
        },
        {
          "text": "<code>body</code>元素的<code>font-family</code>属性值应为<code>monospace</code>。",
          "testString": "assert(($(\"body\").css(\"font-family\").match(/monospace/i)), '<code>body</code>元素的<code>font-family</code>属性值应为<code>monospace</code>。');"
        },
        {
          "text": "<code>h1</code>元素应该继承<code>body</code>的<code>monospace</code>字体属性。",
          "testString": "assert(($(\"h1\").length > 0 && $(\"h1\").css(\"font-family\").match(/monospace/i)), '<code>h1</code>元素应该继承<code>body</code>的<code>monospace</code>字体属性。');"
        },
        {
          "text": "<code>h1</code>元素的字体颜色也应该继承<code>body</code>元素的绿色。",
          "testString": "assert(($(\"h1\").length > 0 && $(\"h1\").css(\"color\") === \"rgb(0, 128, 0)\"), '<code>h1</code>元素的字体颜色也应该继承<code>body</code>元素的绿色。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "  }",
            "",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08756",
      "title": "Prioritize One Style Over Another",
      "description": [
        "有时候，你的 HTML 元素的样式会跟其他样式发生冲突。",
        "就像，你的<code>h1</code>元素也不能同时设置<code>green</code>和<code>pink</code>两种样式。",
        "让我们尝试创建一个字体颜色为<code>pink</code>的 class，并应于用其中一个元素中。猜一猜，它会覆盖<code>body</code>元素设置的<code>color: green;</code>CSS 属性吗？",
        "<hr>",
        "创建一个能将元素的字体颜色改为<code>pink</code>的CSS class，并起名为<code>pink-text</code>。",
        "给你的<code>h1</code>元素添加<code>pink-text</code>class。"
      ],
      "tests": [
        {
          "text": "<code>h1</code>元素应该含有<code>pink-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), '<code>h1</code>元素应该含有<code>pink-text</code> class。');"
        },
        {
          "text": "<code>&#60;style&#62;</code>标签应该含有一个可以改变字体颜色的<code>pink-text</code> class。",
          "testString": "assert(code.match(/\\.pink-text\\s*\\{\\s*color\\s*:\\s*.+\\s*;\\s*\\}/g), '<code>&#60;style&#62;</code>标签应该含有一个可以改变字体颜色的<code>pink-text</code> class。');"
        },
        {
          "text": "<code>h1</code>元素的字体颜色应该为<code>pink（粉色）</code>。",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 192, 203)\", '<code>h1</code>元素的字体颜色应该为<code>pink（粉色）</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "</style>",
            "<h1>Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf04756",
      "title": "Override Styles in Subsequent CSS",
      "description": [
        "\"pink-text\" class 覆盖了<code>body</code>元素的 CSS 声明。",
        "我们刚刚证明了我们的 class 会覆盖<code>body</code>的 CSS 样式。那么，下一个问题是，我们要怎么样才能覆盖我们的<code>pink-text</code>class？",
        "<hr>",
        "创建一个字体颜色为<code>blue</code>的<code>blue-text</code>CSS class，并确保它在<code>pink-text</code>下方声明。",
        "在含有<code>pink-text</code>class 的<code>h1</code>元素里面，再添加一个<code>blue-text</code>class，这时候，我们将能看到到底是谁获胜。",
        "HTML 同时应用多个 class 属性需以空格来间隔，例子如下:",
        "<code>class=\"class1 class2\"</code>",
        "注意：HTML 元素里应用的 class 的先后顺序无关紧要。",
        "但是，在<code>&#60;style&#62;</code>标签里面声明的<code>class</code>顺序十分重要。第二个声明始终优于第一个声明。因为<code>.blue-text</code>在<code>.pink-text</code>的后面声明，所以<code>.blue-text</code>会覆盖<code>.pink-text</code>的样式。"
      ],
      "tests": [
        {
          "text": "<code>h1</code>元素应该包含<code>pink-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), '<code>h1</code>元素应该包含<code>pink-text</code> class。');"
        },
        {
          "text": "<code>h1</code>元素应该包含<code>blue-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), '<code>h1</code>元素应该包含<code>blue-text</code> class。');"
        },
        {
          "text": "<code>blue-text</code>和<code>pink-text</code>需同时应用于<code>h1</code>元素上。",
          "testString": "assert($(\".pink-text\").hasClass(\"blue-text\"), '<code>blue-text</code>和<code>pink-text</code>需同时应用于<code>h1</code>元素上。');"
        },
        {
          "text": "<code>h1</code>元素的颜色应为蓝色。",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(0, 0, 255)\", '<code>h1</code>元素的颜色应为蓝色。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "</style>",
            "<h1 class=\"pink-text\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd8aedf06756",
      "title": "Override Class Declarations by Styling ID Attributes",
      "description": [
        "我们刚刚证明了浏览器读取 CSS 是由上到下的。这就意味着，如果发生冲突，浏览器将会应用最后声明的样式。",
        "不过我们还没结束，还有其他方法来覆盖 CSS 样式。你还记得 id 属性吗？",
        "通过给<code>h1</code>元素添加 id 属性，来覆盖 class 属性定义的同名样式。",
        "<hr>",
        "给<code>h1</code>元素添加 id 属性，属性值为<code>orange-text</code>。设置方式如下：",
        "<code>&#60;h1 id=\"orange-text\"&#62;</code>",
        "<code>h1</code>元素继续保留<code>blue-text</code>和<code>pink-text</code>class。",
        "在<code>style</code>元素中创建名为<code>orange-text</code>的 id 选择器。例子如下：",
        "<blockquote>#orange-text {<br>&nbsp;&nbsp;color: orange;<br>}</blockquote>",
        "注意：无论在<code>pink-text</code>class 的上面或者下面声明，id 选择器的优先级总是会高于 class 选择器。"
      ],
      "tests": [
        {
          "text": "<code>h1</code>元素应该包含<code>pink-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), '<code>h1</code>元素应该包含<code>pink-text</code> class。');"
        },
        {
          "text": "<code>h1</code>元素应该包含<code>blue-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), '<code>h1</code>元素应该包含<code>blue-text</code> class。');"
        },
        {
          "text": "<code>h1</code>的 id 属性值为<code>orange-text</code>。",
          "testString": "assert($(\"h1\").attr(\"id\") === \"orange-text\", '<code>h1</code>的 id 属性值为<code>orange-text</code>。');"
        },
        {
          "text": "应该只有一个<code>h1</code>元素。",
          "testString": "assert(($(\"h1\").length === 1), '应该只有一个<code>h1</code>元素。');"
        },
        {
          "text": "创建名为<code>orange-text</code>的 id 选择器。",
          "testString": "assert(code.match(/#orange-text\\s*{/gi), '创建名为<code>orange-text</code>的 id 选择器。');"
        },
        {
          "text": "不要在<code>h1</code>元素里面使用<code>style（行内样式）</code>。",
          "testString": "assert(!code.match(/<h1.*style.*>/gi), '不要在<code>h1</code>元素里面使用<code>style（行内样式）</code>。');"
        },
        {
          "text": "<code>h1</code>元素的字体颜色应为橘色。",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 165, 0)\", '<code>h1</code>元素的字体颜色应为橘色。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "  .blue-text {",
            "    color: blue;",
            "  }",
            "</style>",
            "<h1 class=\"pink-text blue-text\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf06756",
      "title": "Override Class Declarations with Inline Styles",
      "description": [
        "我们刚刚证明了，id 选择器无论在<code>style</code>标签哪里声明，都会覆盖 class 声明的样式，",
        "其实还有其他方法可以覆盖重写 CSS 样式。你还记得行内样式吗？",
        "<hr>",
        "使用行内样式尝试让<code>h1</code>的字体颜色变白。像下面这样使用：",
        "<code>&#60;h1 style=\"color: white\"&#62;</code>",
        "你的<code>h1</code>元素需继续保留<code>blue-text</code>和<code>pink-text</code>class。"
      ],
      "tests": [
        {
          "text": "<code>h1</code>元素应该包含<code>pink-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), '<code>h1</code>元素应该包含<code>pink-text</code> class。');"
        },
        {
          "text": "<code>h1</code>元素应该包含<code>blue-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), '<code>h1</code>元素应该包含<code>blue-text</code> class。');"
        },
        {
          "text": "<code>h1</code>元素应该包含一个名为<code>orange-text</code>的id。",
          "testString": "assert($(\"h1\").attr(\"id\") === \"orange-text\", '<code>h1</code>元素应该包含一个名为<code>orange-text</code>的id。');"
        },
        {
          "text": "<code>h1</code>元素应该含有行内样式。",
          "testString": "assert(document.querySelector('h1[style]'), '<code>h1</code>元素应该含有行内样式。');"
        },
        {
          "text": "<code>h1</code>元素的字体颜色应该为白色。",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 255, 255)\", '<code>h1</code>元素的字体颜色应该为白色。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  #orange-text {",
            "    color: orange;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "  .blue-text {",
            "    color: blue;",
            "  }",
            "</style>",
            "<h1 id=\"orange-text\" class=\"pink-text blue-text\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf07756",
      "title": "Override All Other Styles by using Important",
      "description": [
        "耶！我们刚刚又证明了行内样式会覆盖<code>style</code>标签里面所有的 CSS 声明。",
        "不过，还有一种方式可以覆盖重新 CSS 样式。这是所有方法里面最强大的一个。在此之前，我们要考虑清楚，为什么我们需要覆盖 CSS 样式。",
        "在很多时候，你使用 CSS 库，有时候它们声明的样式会意外的覆盖你的 CSS 样式。当你需要保证你的 CSS 样式不受影响，你可以使用<code>!important</code>。",
        "让我们回到<code>pink-text</code>class 声明之中，它已经被随其后的 class 声明，id 声明，以及行内样式所覆盖。",
        "<hr>",
        "在<code>pink-text</code>class 的<code>color</code>声明里面使用<code>!important</code>关键字，去确保<code>h1</code>元素的字体颜色一定为粉色。",
        "操作的方法大概如下：",
        "<code>color: red !important;</code>"
      ],
      "tests": [
        {
          "text": "<code>h1</code>元素应该包含<code>pink-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"pink-text\"), '<code>h1</code>元素应该包含<code>pink-text</code> class。');"
        },
        {
          "text": "<code>h1</code>元素应该包含<code>blue-text</code> class。",
          "testString": "assert($(\"h1\").hasClass(\"blue-text\"), '<code>h1</code>元素应该包含<code>blue-text</code> class。');"
        },
        {
          "text": "<code>h1</code>元素应该包含一个名为<code>orange-text</code>的id。",
          "testString": "assert($(\"h1\").attr(\"id\") === \"orange-text\", '<code>h1</code>元素应该包含一个名为<code>orange-text</code>的id。');"
        },
        {
          "text": "<code>h1</code>元素应该包含<code>color&#58; white</code>的行内样式声明。",
          "testString": "assert(code.match(/<h1.*style/gi) && code.match(/<h1.*style.*color\\s*?:/gi), '<code>h1</code>元素应该包含<code>color&#58; white</code>的行内样式声明。');"
        },
        {
          "text": "<code>pink-text</code> class 声明应该含有<code>!important</code>关键字。",
          "testString": "assert(code.match(/\\.pink-text\\s*?\\{[\\s\\S]*?color:.*pink.*!important\\s*;?[^\\.]*\\}/g), '<code>pink-text</code> class 声明应该含有<code>!important</code>关键字。');"
        },
        {
          "text": "<code>h1</code>元素的字体颜色应该为粉色。",
          "testString": "assert($(\"h1\").css(\"color\") === \"rgb(255, 192, 203)\", '<code>h1</code>元素的字体颜色应该为粉色。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "    font-family: monospace;",
            "    color: green;",
            "  }",
            "  #orange-text {",
            "    color: orange;",
            "  }",
            "  .pink-text {",
            "    color: pink;",
            "  }",
            "  .blue-text {",
            "    color: blue;",
            "  }",
            "</style>",
            "<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08726",
      "title": "Use Hex Code for Specific Colors",
      "description": [
        "你知道在 CSS 里面还有其他方式来代表颜色吗？其中一个方法叫做十六进制编码，简称<code>hex</code>。",
        "我们日常使用最多的计数方法，基于十进制，使用 0 到 9 数字来表示。而<code>十六进制编码</code>（<code>hex</code>）基于 16 位数字，它含有 16 种不同字符。十六进制与十进制一样，0-9 表示着 0 到 9 的值，不同的是，A，B，C，D，E，F 表示着十六进制 10 到 15 的值。总的来说，0 到 F 在<code>十六进制</code>里代表着数字，提供了 16 种可能性。你可以在<a target='_blank' href='https://en.wikipedia.org/wiki/Hexadecimal'>这里</a>找到更多的相关信息。",
        "在 CSS 里面，我们可以用使用 6 个十六进制的数字来代表颜色，每两个数字控制一种颜色，分别是红（R），绿（G），蓝（B）。例如，<code>#000000</code>代表着黑色，同时也是最小的值。你可以在<a target='_blank' href='https://en.wikipedia.org/wiki/RGB_color_model'>这里</a>找到更多的相关信息。",
        "<blockquote>body {<br>&nbsp;&nbsp;color: #000000;<br>}</blockquote>",
        "<hr>",
        "使用<code>#000000</code>的十六进制编码来替换<code>body</code>元素的黑色背景。"
      ],
      "tests": [
        {
          "text": "<code>body</code>元素的背景颜色应该是黑色。",
          "testString": "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", '<code>body</code>元素的背景颜色应该是黑色。');"
        },
        {
          "text": "使用<code>十六进制编码</code>来替换<code>black</code>的写法。",
          "testString": "assert(code.match(/body\\s*{(([\\s\\S]*;\\s*?)|\\s*?)background.*\\s*:\\s*?#000(000)?((\\s*})|(;[\\s\\S]*?}))/gi), '使用<code>十六进制编码</code>来替换<code>black</code>的写法。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: black;",
            "  }",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08721",
      "title": "Use Hex Code to Mix Colors",
      "description": [
        "回顾一下，<code>hex</code>使用 6 个十六进制编码来表示颜色，2 个一组，分别代表着红（R），绿（G），蓝（B）。",
        "通过三原色，我们可以创建 1600 万种不同颜色！",
        "例如，橘色是纯红色混合一些绿色而成的，没有蓝色的参与。在十六进制编码里面，它被转译为<code>#FFA500</code>。",
        "<code>0</code>是十六进制里面最小的数字，表示着没有颜色。",
        "<code>F</code>是十六进制里面最大的数字，表示着最高的亮度。",
        "<hr>",
        "把<code>style</code>标签里面的颜色值用正确的十六进制编码替换。",
        "<table class='table table-striped'><tr><th>Color</th><th>Hex Code</th></tr><tr><td>Dodger Blue</td><td><code>#1E90FF</code></td></tr><tr><td>Green</td><td><code>#00FF00</code></td></tr><tr><td>Orange</td><td><code>#FFA500</code></td></tr><tr><td>Red</td><td><code>#FF0000</code></td></tr></table>"
      ],
      "tests": [
        {
          "text": "文本内容为<code>I am red!</code>的<code>h1</code>元素的字体颜色应该为<code>red</code>。",
          "testString": "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', '文本内容为<code>I am red!</code>的<code>h1</code>元素的字体颜色应该为<code>red</code>。');"
        },
        {
          "text": "使用<code>十六进制编码</code>替换<code>red</code>关键词。",
          "testString": "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?#FF0000\\s*?;\\s*?}/gi), '使用<code>十六进制编码</code>替换<code>red</code>关键词。');"
        },
        {
          "text": "文本内容为<code>I am green!</code>的<code>h1</code>元素的字体颜色应该为<code>green</code>。",
          "testString": "assert($('.green-text').css('color') === 'rgb(0, 255, 0)', '文本内容为<code>I am green!</code>的<code>h1</code>元素的字体颜色应该为<code>green</code>。');"
        },
        {
          "text": "使用<code>十六进制编码</code>替换<code>green</code>关键词。",
          "testString": "assert(code.match(/\\.green-text\\s*?{\\s*?color:\\s*?#00FF00\\s*?;\\s*?}/gi), '使用<code>十六进制编码</code>替换<code>green</code>关键词。');"
        },
        {
          "text": "文本内容为<code>I am dodger blue!</code>的<code>h1</code>元素的字体颜色应该为<code>dodger blue</code>。",
          "testString": "assert($('.dodger-blue-text').css('color') === 'rgb(30, 144, 255)', '文本内容为<code>I am dodger blue!</code>的<code>h1</code>元素的字体颜色应该为<code>dodger blue</code>。');"
        },
        {
          "text": "使用<code>十六进制编码</code>替换<code>dodgerblue</code>关键词。",
          "testString": "assert(code.match(/\\.dodger-blue-text\\s*?{\\s*?color:\\s*?#1E90FF\\s*?;\\s*?}/gi), '使用<code>十六进制编码</code>替换<code>dodgerblue</code>关键词。');"
        },
        {
          "text": "文本内容为<code>I am orange!</code>的<code>h1</code>元素的字体颜色应该为<code>orange</code>。",
          "testString": "assert($('.orange-text').css('color') === 'rgb(255, 165, 0)', '文本内容为<code>I am orange!</code>的<code>h1</code>元素的字体颜色应该为<code>orange</code>。');"
        },
        {
          "text": "使用<code>十六进制编码</code>替换<code>orange</code>关键词。",
          "testString": "assert(code.match(/\\.orange-text\\s*?{\\s*?color:\\s*?#FFA500\\s*?;\\s*?}/gi), '使用<code>十六进制编码</code>替换<code>orange</code>关键词。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: black;",
            "  }",
            "  .green-text {",
            "    color: black;",
            "  }",
            "  .dodger-blue-text {",
            "    color: black;",
            "  }",
            "  .orange-text {",
            "    color: black;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"red-text\">I am red!</h1>",
            "",
            "<h1 class=\"green-text\">I am green!</h1>",
            "",
            "<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>",
            "",
            "<h1 class=\"orange-text\">I am orange!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aedf08719",
      "title": "Use Abbreviated Hex Code",
      "description": [
        "许多人对超过 1600 万种颜色的可能性感到不知所措，并且很难记住十六进制编码。幸运的是，它也提供缩写的方法。",
        "例如，红色的<code>#FF0000</code>十六进制编码可以缩写成<code>#F00</code>。在这种缩写形式里，三个数字分别代表着红（R），绿（G），蓝（B）颜色。",
        "这样，颜色的可能性减少到了大约 4000 种。且在浏览器里<code>#FF0000</code>和<code>#F00</code>完全是同一种颜色。",
        "<hr>",
        "接下来，使用缩写的十六进制编码给元素设置正确的颜色。",
        "<table class='table table-striped'><tr><th>Color</th><th>Short Hex Code</th></tr><tr><td>Cyan</td><td><code>#0FF</code></td></tr><tr><td>Green</td><td><code>#0F0</code></td></tr><tr><td>Red</td><td><code>#F00</code></td></tr><tr><td>Fuchsia</td><td><code>#F0F</code></td></tr></table>"
      ],
      "tests": [
        {
          "text": "文本内容为<code>I am red!</code>的<code>h1</code>元素的字体颜色应该为<code>red</code>。",
          "testString": "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', '文本内容为<code>I am red!</code>的<code>h1</code>元素的字体颜色应该为<code>red</code>。');"
        },
        {
          "text": "要使用缩写的<code>red</code>的<code>十六进制编码</code>，而不是<code>#FF0000</code>。",
          "testString": "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?#F00\\s*?;\\s*?}/gi), '要使用缩写的<code>red</code>的<code>十六进制编码</code>，而不是<code>#FF0000</code>。');"
        },
        {
          "text": "文本内容为<code>I am green!</code>的<code>h1</code>元素的字体颜色应该为<code>green</code>。",
          "testString": "assert($('.green-text').css('color') === 'rgb(0, 255, 0)', '文本内容为<code>I am green!</code>的<code>h1</code>元素的字体颜色应该为<code>green</code>。');"
        },
        {
          "text": "要使用缩写的<code>green</code>的<code>十六进制编码</code>，而不是<code>#00FF00</code>的十六进制编码。",
          "testString": "assert(code.match(/\\.green-text\\s*?{\\s*?color:\\s*?#0F0\\s*?;\\s*?}/gi), '要使用缩写的<code>green</code>的<code>十六进制编码</code>，而不是<code>#00FF00</code>。');"
        },
        {
          "text": "文本内容为<code>I am cyan!</code>的<code>h1</code>元素的字体颜色应该为<code>cyan</code>。",
          "testString": "assert($('.cyan-text').css('color') === 'rgb(0, 255, 255)', '文本内容为<code>I am cyan!</code>的<code>h1</code>元素的字体颜色应该为<code>cyan</code>。');"
        },
        {
          "text": "要使用缩写的<code>cyan</code>的<code>十六进制编码</code>，而不是<code>#00FFFF</code>的十六进制编码。",
          "testString": "assert(code.match(/\\.cyan-text\\s*?{\\s*?color:\\s*?#0FF\\s*?;\\s*?}/gi), '要使用缩写的<code>cyan</code>的<code>十六进制编码</code>，而不是<code>#00FFFF</code>。');"
        },
        {
          "text": "文本内容为<code>I am fuchsia!</code>的<code>h1</code>元素的字体颜色应该为<code>fuchsia</code>。",
          "testString": "assert($('.fuchsia-text').css('color') === 'rgb(255, 0, 255)', '文本内容为<code>I am fuchsia!</code>的<code>h1</code>元素的字体颜色应该为<code>fuchsia</code>。');"
        },
        {
          "text": "要使用缩写的<code>fuchsia</code>的<code>十六进制编码</code>，而不是<code>#FF00FF</code>的十六进制编码。",
          "testString": "assert(code.match(/\\.fuchsia-text\\s*?{\\s*?color:\\s*?#F0F\\s*?;\\s*?}/gi), '要使用缩写的<code>fuchsia</code>的<code>十六进制编码</code>，而不是<code>#FF00FF</code>。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: #000000;",
            "  }",
            "  .fuchsia-text {",
            "    color: #000000;",
            "  }",
            "  .cyan-text {",
            "    color: #000000;",
            "  }",
            "  .green-text {",
            "    color: #000000;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"red-text\">I am red!</h1>",
            "",
            "<h1 class=\"fuchsia-text\">I am fuchsia!</h1>",
            "",
            "<h1 class=\"cyan-text\">I am cyan!</h1>",
            "",
            "<h1 class=\"green-text\">I am green!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad87fee1348bd9aede08718",
      "title": "Use RGB values to Color Elements",
      "description": [
        "另一种可以在 CSS 中表示颜色的方法是使用 RGB 值。",
        "黑色的 RGB 值声明如下：",
        "<code>rgb(0, 0, 0)</code>",
        "白色的 RGB 值声明如下：",
        "<code>rgb(255, 255, 255)</code>",
        "RGB 不像十六进制编码，并不需要用到 6 位十六进制数字。在 RGB 里，你只需要指定每种颜色的亮度大小，从 0 到 255。",
        "在数学的角度来看，如果将十六进制的一种颜色的两位数字相乘，16 乘以 16 也等于 256。所以，从 0 到 255 计算的 RGB 值的具有十六进制编码相同的颜色可能性。",
        "下面是通过使用 RGB 值设置背景颜色为橘色的例子：",
        "<blockquote>body {<br>&nbsp;&nbsp;background-color: rgb(255, 165, 0);<br>}</blockquote>",
        "<hr>",
        "让我们用<code>rgb(0, 0, 0)</code>的 RGB 值替换<code>body</code>元素背景颜色的十六进制编码。"
      ],
      "tests": [
        {
          "text": "<code>body</code>元素的背景颜色应该是黑色的。",
          "testString": "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", '<code>body</code>元素的背景颜色应该是黑色的。');"
        },
        {
          "text": "<code>body</code>元素的背景颜色的黑色值应该为<code>RGB</code>值。",
          "testString": "assert(code.match(/rgb\\s*\\(\\s*0\\s*,\\s*0\\s*,\\s*0\\s*\\)/ig), '<code>body</code>元素的背景颜色的黑色值应该为<code>RGB</code>值。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #F00;",
            "  }",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bad82fee1348bd9aedf08721",
      "title": "Use RGB to Mix Colors",
      "description": [
        "就像使用十六进制编码一样，你可以通过不同值的组合，来混合得到不同的 RGB 颜色。",
        "<hr>",
        "将<code>style</code>标签里面中的十六进制编码替换为正确的 RGB 值。",
        "<table class='table table-striped'><tr><th>Color</th><th>RGB</th></tr><tr><td>Blue</td><td><code>rgb(0, 0, 255)</code></td></tr><tr><td>Red</td><td><code>rgb(255, 0, 0)</code></td></tr><tr><td>Orchid</td><td><code>rgb(218, 112, 214)</code></td></tr><tr><td>Sienna</td><td><code>rgb(160, 82, 45)</code></td></tr></table>"
      ],
      "tests": [
        {
          "text": "文本内容为<code>I am red!</code>的<code>h1</code>元素的字体颜色应该为<code>red</code>。",
          "testString": "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', '文本内容为<code>I am red!</code>的<code>h1</code>元素的字体颜色应该为<code>red</code>。');"
        },
        {
          "text": "<code>red</code>颜色应使用<code>RGB</code>值。",
          "testString": "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?255\\s*?,\\s*?0\\s*?,\\s*?0\\s*?\\)\\s*?;\\s*?}/gi), '<code>red</code>颜色应使用<code>RGB</code>值。');"
        },
        {
          "text": "文本内容为<code>I am orchid!</code>的<code>h1</code>元素的字体颜色应该为<code>orchid</code>。",
          "testString": "assert($('.orchid-text').css('color') === 'rgb(218, 112, 214)', '文本内容为<code>I am orchid!</code>的<code>h1</code>元素的字体颜色应该为<code>orchid</code>。');"
        },
        {
          "text": "<code>orchid</code>颜色应使用<code>RGB</code>值。",
          "testString": "assert(code.match(/\\.orchid-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?218\\s*?,\\s*?112\\s*?,\\s*?214\\s*?\\)\\s*?;\\s*?}/gi), '<code>red</code>颜色应使用<code>RGB</code>值。');"
        },
        {
          "text": "文本内容为<code>I am blue!</code>的<code>h1</code>元素的字体颜色应该为<code>blue</code>。",
          "testString": "assert($('.blue-text').css('color') === 'rgb(0, 0, 255)', '文本内容为<code>I am blue!</code>的<code>h1</code>元素的字体颜色应该为<code>blue</code>。');"
        },
        {
          "text": "<code>blue</code>颜色应使用<code>RGB</code>值。",
          "testString": "assert(code.match(/\\.blue-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?255\\s*?\\)\\s*?;\\s*?}/gi), '<code>blue</code>颜色应使用<code>RGB</code>值。');"
        },
        {
          "text": "文本内容为<code>I am sienna!</code>的<code>h1</code>元素的字体颜色应该为<code>sienna</code>。",
          "testString": "assert($('.sienna-text').css('color') === 'rgb(160, 82, 45)', '文本内容为<code>I am sienna!</code>的<code>h1</code>元素的字体颜色应该为<code>sienna</code>。');"
        },
        {
          "text": "<code>sienna</code>颜色应使用<code>RGB</code>值。",
          "testString": "assert(code.match(/\\.sienna-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?160\\s*?,\\s*?82\\s*?,\\s*?45\\s*?\\)\\s*?;\\s*?}/gi), '<code>sienna</code>颜色应使用<code>RGB</code>值。');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .red-text {",
            "    color: #000000;",
            "  }",
            "  .orchid-text {",
            "    color: #000000;",
            "  }",
            "  .sienna-text {",
            "    color: #000000;",
            "  }",
            "  .blue-text {",
            "    color: #000000;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"red-text\">I am red!</h1>",
            "",
            "<h1 class=\"orchid-text\">I am orchid!</h1>",
            "",
            "<h1 class=\"sienna-text\">I am sienna!</h1>",
            "",
            "<h1 class=\"blue-text\">I am blue!</h1>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d725e424fe3d0e10cad10",
      "title": "Use CSS Variables to change several elements at once",
      "description": [
        "<dfn>CSS 变量</dfn>是一种仅更改一个值，来一次性更改多个 CSS 样式属性的强大方法。",
        "按照下面指示的来做，我们只需要改变三个值，多个样式将会同时被修改。",
        "<hr>",
        "在<code>penguin</code>class 里，将<code>black</code>改为<code>gray</code>，<code>gray</code>改为<code>white</code>，<code>yellow</code>改为<code>orange</code>。"
      ],
      "tests": [
        {
          "text": "<code>penguin</code> class 声明的<code>--penguin-skin</code>变量的值应为<code>gray</code>。",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class 声明的<code>--penguin-skin</code>变量的值应为<code>gray</code>。');"
        },
        {
          "text": "<code>penguin</code> class 声明的<code>--penguin-belly</code>变量的值应为<code>white</code>。",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class 声明的<code>--penguin-belly</code>变量的值应为<code>white</code>。');"
        },
        {
          "text": "<code>penguin</code> class 声明的<code>--penguin-beak</code>变量的值应为<code>orange</code>。",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-beak\\s*?:\\s*?orange\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class 声明的<code>--penguin-beak</code>变量的值应为<code>orange</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    ",
            "    /* change code below */",
            "    --penguin-skin: black;",
            "    --penguin-belly: gray;",
            "    --penguin-beak: yellow;",
            "    /* change code above */",
            "    ",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%; ",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d726c424fe3d0e10cad11",
      "title": "Create a custom CSS Variable",
      "description": [
        "创建一个 CSS 变量，你只需要在变量名前添加两个<code>破折号</code>，并为其赋值，例子如下：",
        "<blockquote>--penguin-skin: gray;</blockquote>",
        "这样会创建一个<code>--penguin-skin</code>变量并赋值为<code>gray（灰色）</code>。",
        "现在，其他元素可通过该变量来设置为<code>gray（灰色）</code>。",
        "<hr>",
        "在<code>penguin</code>class 里面，创建一个<code>--penguin-skin</code>变量，且赋值为<code>gray（灰色）</code>。"
      ],
      "tests": [
        {
          "text": "<code>penguin</code> class 里应声明<code>--penguin-skin</code>变量，且赋值为<code>gray</code>。",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class 里应声明<code>--penguin-skin</code>变量，且赋值为<code>gray</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    ",
            "    /* add code below */",
            "    ",
            "    /* add code above */",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: black;",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: black;",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: black;",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: white;",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%; ",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: orange;",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: orange;",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;  ",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d727a424fe3d0e10cad12",
      "title": "Use a custom CSS Variable",
      "description": [
        "创建变量后，CSS 属性可以通过引用变量名来使用它的值。",
        "<blockquote>background: var(--penguin-skin);</blockquote>",
        "因为引用了<code>--penguin-skin</code>变量的值，使用了这个样式的元素背景颜色会是灰色。",
        "注意：如果变量名不匹配，样式不会生效。",
        "<hr>",
        "<code>penguin-top</code>，<code>penguin-bottom</code>，<code>right-hand</code>和<code>left-hand</code>class 的<code>background</code>属性均使用<code>--penguin-skin</code>变量值。"
      ],
      "tests": [
        {
          "text": "<code>penguin-top</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。",
          "testString": "assert(code.match(/.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi), '<code>penguin-top</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。');"
        },
        {
          "text": "<code>penguin-bottom</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。",
          "testString": "assert(code.match(/.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.right-hand\\s{/gi), '<code>penguin-bottom</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。');"
        },
        {
          "text": "<code>right-hand</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。",
          "testString": "assert(code.match(/.right-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.left-hand\\s{/gi), '<code>right-hand</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。');"
        },
        {
          "text": "<code>left-hand</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。",
          "testString": "assert(code.match(/.left-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>left-hand</code> class 的<code>background</code>属性应使用<code>--penguin-skin</code>变量值。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    --penguin-skin: gray;",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    ",
            "    /* change code below */",
            "    background: black;",
            "    /* change code above */",
            "    ",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: white;",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: white;",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: orange;",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;  ",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%; ",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: orange;",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: orange;",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d7286424fe3d0e10cad13",
      "title": "Attach a Fallback value to a CSS Variable",
      "description": [
        "使用变量来作为 CSS 属性值的时候，可以设置一个备用值来防止由于某些原因导致变量不生效的情况。",
        "或许有些人正在使用着不支持 CSS 变量的旧浏览器，又或者，设备不支持你设置的变量值。为了防止这种情况出现，那么你可以这样写：",
        "<blockquote>background: var(--penguin-skin, black);</blockquote>",
        "这样，当你的变量有问题的时候，它会设置你的背景颜色为黑色。",
        "提示：这对调试会很有帮助。",
        "<hr>",
        "在<code>penguin-top</code>和<code>penguin-bottom</code>class 里面，<code>background</code>属性设置一个<code>black</code>的备用色。",
        "<strong>注意：</strong>因为 CSS 变量名拼写错了，所以备用值会被使用。"
      ],
      "tests": [
        {
          "text": "<code>penguin-top</code> class 的<code>background</code>属性应设置一个<code>black</code>备用颜色。",
          "testString": "assert(code.match(/.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi), '<code>penguin-top</code> class 的<code>background</code>属性应设置一个<code>black</code>备用颜色。');"
        },
        {
          "text": "<code>penguin-bottom</code> class 的<code>background</code>属性应设置一个<code>black</code>备用颜色。",
          "testString": "assert(code.match(/.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>penguin-bottom</code> class 的<code>background</code>属性应设置一个<code>black</code>备用颜色。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .penguin {",
            "    --penguin-skin: black;",
            "    --penguin-belly: gray;",
            "    --penguin-beak: yellow;",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "  ",
            "    /* change code below */",
            "    background: var(--pengiun-skin);",
            "    /* change code above */",
            "  ",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "  ",
            "    /* change code below */",
            "    background: var(--pengiun-skin);",
            "    /* change code above */",
            "  ",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, black);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, black);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d7295424fe3d0e10cad14",
      "title": "Cascading CSS variables",
      "description": [
        "你创建的变量，不但可以在你声明变量的元素里面使用，同时也可以在该元素的子元素里面使用。这种效应称为<dfn>cascading（层叠）</dfn>。",
        "因为层叠的效果，CSS 变量通常会定义在<dfn>:root</dfn>元素里。",
        "就像<code>html</code>是<code>body</code>的容器一样，你也可以认为<code>:root</code>元素是你整个 HTML 文档的容器。",
        "在<code>:root</code>创建的变量，在整个网页里面都能生效。",
        "<hr>",
        "在<code>:root</code>里面定义一个<code>--penguin-belly</code>变量，并赋值为<code>pink</code>。通过层叠的效应，使应用了变量的地方都修改为粉色。"
      ],
      "tests": [
        {
          "text": "在<code>:root</code>里面声明<code>--penguin-belly</code>变量，并且赋值为<code>pink</code>。",
          "testString": "assert(code.match(/:root\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?pink\\s*?;[\\s\\S]*}/gi), '在<code>:root</code>里面声明<code>--penguin-belly</code>变量，并且赋值为<code>pink</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  :root {",
            "    ",
            "    /* add code below */",
            "    ",
            "    /* add code above */",
            "  }",
            "  ",
            "  body {",
            "    background: var(--penguin-belly, #c6faf1);",
            "  }",
            "  ",
            "  .penguin {",
            "    --penguin-skin: gray;",
            "    --penguin-beak: orange;",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d72a1424fe3d0e10cad15",
      "title": "Change a variable for a specific area",
      "description": [
        "当你在<code>:root</code>里创建变量时，这些变量的作用域是整个页面。",
        "如果在元素里创建相同的变量，会重写<code>:root</code>变量设置的值。",
        "<hr>",
        "在<code>penguin</code>class 里，设置<code>--penguin-belly</code>的值为<code>white</code>。"
      ],
      "tests": [
        {
          "text": "应该在<code>penguin</code>clas 里重定义<code>--penguin-belly</code>的变量值，且它的值为<code>white</code>。",
          "testString": "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi), '应该在<code>penguin</code>clas 里重定义<code>--penguin-belly</code>的变量值，且它的值为<code>white</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  :root {",
            "    --penguin-skin: gray;",
            "    --penguin-belly: pink;",
            "    --penguin-beak: orange;",
            "  }",
            "  ",
            "  body {",
            "    background: var(--penguin-belly, #c6faf1);",
            "  }",
            "  ",
            "  .penguin {",
            "    ",
            "    /* add code below */",
            "    ",
            "    /* add code above */",
            "    ",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: 300px;",
            "    height: 300px;",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, pink);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, pink);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, pink);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 0%;",
            "    left: -5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left: 15%;",
            "    background: white;",
            "    width: 35%;",
            "    height: 35%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a9d72ad424fe3d0e10cad16",
      "title": "Use a media query to change a variable",
      "description": [
        "CSS 变量可以简化媒体查询的方式。",
        "例如，当屏幕小于或大于媒体查询所设置的值，通过改变变量的值，那么应用了变量的元素样式都会得到响应修改。",
        "<hr>",
        "在<code>media query（媒体查询）</code>声明的<code>:root</code>选择器里，重定义<code>--penguin-size</code>的值为 200px，且重定义<code>--penguin-skin</code>的值为<code>black</code>，然后通过缩放页面来查看是否生效。"
      ],
      "tests": [
        {
          "text": "<code>:root</code>中的<code>--penguin-size</code>值应为<code>200px</code>。",
          "testString": "assert(code.match(/media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-size\\s*?:\\s*?200px\\s*?;[\\s\\S]*}[\\s\\S]*}/gi), '<code>:root</code>中的<code>--penguin-size</code>值应为<code>200px</code>。');"
        },
        {
          "text": "<code>:root</code>中的<code>--penguin-skin</code>值应为<code>black</code>。",
          "testString": "assert(code.match(/media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?black\\s*?;[\\s\\S]*}[\\s\\S]*}/gi), '<code>:root</code>中的<code>--penguin-skin</code>值应为<code>black</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Mar 15, 2018",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  :root {",
            "    --penguin-size: 300px;",
            "    --penguin-skin: gray;",
            "    --penguin-belly: white;",
            "    --penguin-beak: orange;",
            "  }",
            "  ",
            "  @media (max-width: 350px) {",
            "    :root {",
            "      ",
            "      /* add code below */",
            "      ",
            "      /* add code above */",
            "      ",
            "    }",
            "  }",
            "  ",
            "  .penguin {",
            "    position: relative;",
            "    margin: auto;",
            "    display: block;",
            "    margin-top: 5%;",
            "    width: var(--penguin-size, 300px);",
            "    height: var(--penguin-size, 300px);",
            "  }",
            "  ",
            "  .right-cheek {",
            "    top: 15%;",
            "    left: 35%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .left-cheek {",
            "    top: 15%;",
            "    left: 5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 60%;",
            "    height: 70%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .belly {",
            "    top: 60%;",
            "    left: 2.5%;",
            "    background: var(--penguin-belly, white);",
            "    width: 95%;",
            "    height: 100%;",
            "    border-radius: 120% 120% 100% 100%;",
            "  }",
            "  ",
            "  .penguin-top {",
            "    top: 10%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 50%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 60% 60%;",
            "  }",
            "  ",
            "  .penguin-bottom {",
            "    top: 40%;",
            "    left: 23.5%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 53%;",
            "    height: 45%;",
            "    border-radius: 70% 70% 100% 100%;",
            "  }",
            "  ",
            "  .right-hand {",
            "    top: 5%;",
            "    left: 25%;",
            "    background: var(--penguin-skin, black);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 120% 30%;",
            "    transform: rotate(130deg);",
            "    z-index: -1;",
            "    animation-duration: 3s;",
            "    animation-name: wave;",
            "    animation-iteration-count: infinite;",
            "    transform-origin:0% 0%;",
            "    animation-timing-function: linear;",
            "  }",
            "  ",
            "  @keyframes wave {",
            "      10% {",
            "        transform: rotate(110deg);",
            "      }",
            "      20% {",
            "        transform: rotate(130deg);",
            "      }",
            "      30% {",
            "        transform: rotate(110deg);",
            "      } ",
            "      40% {",
            "        transform: rotate(130deg);",
            "      }  ",
            "    }",
            "  ",
            "  .left-hand {",
            "    top: 0%;",
            "    left: 75%;",
            "    background: var(--penguin-skin, gray);",
            "    width: 30%;",
            "    height: 60%;",
            "    border-radius: 30% 30% 30% 120%;",
            "    transform: rotate(-45deg);",
            "    z-index: -1;",
            "  }",
            "  ",
            "  .right-feet {",
            "    top: 85%;",
            "    left: 60%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(-80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .left-feet {",
            "    top: 85%;",
            "    left: 25%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 15%;",
            "    height: 30%;",
            "    border-radius: 50% 50% 50% 50%;",
            "    transform: rotate(80deg);",
            "    z-index: -2222;",
            "  }",
            "  ",
            "  .right-eye {",
            "    top: 45%;",
            "    left: 60%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .left-eye {",
            "    top: 45%;",
            "    left: 25%;",
            "    background: black;",
            "    width: 15%;",
            "    height: 17%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .sparkle {",
            "    top: 25%;",
            "    left:-23%;",
            "    background: white;",
            "    width: 150%;",
            "    height: 100%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-right {",
            "    top: 65%;",
            "    left: 15%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .blush-left {",
            "    top: 65%;",
            "    left: 70%;",
            "    background: pink;",
            "    width: 15%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-top {",
            "    top: 60%;",
            "    left: 40%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 20%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  .beak-bottom {",
            "    top: 65%;",
            "    left: 42%;",
            "    background: var(--penguin-beak, orange);",
            "    width: 16%;",
            "    height: 10%;",
            "    border-radius: 50%;",
            "  }",
            "  ",
            "  body {",
            "    background:#c6faf1;",
            "  }",
            "  ",
            "  .penguin * {",
            "    position: absolute;",
            "  }",
            "</style>",
            "<div class=\"penguin\">",
            "  <div class=\"penguin-bottom\">",
            "    <div class=\"right-hand\"></div>",
            "    <div class=\"left-hand\"></div>",
            "    <div class=\"right-feet\"></div>",
            "    <div class=\"left-feet\"></div>",
            "  </div>",
            "  <div class=\"penguin-top\">",
            "    <div class=\"right-cheek\"></div>",
            "    <div class=\"left-cheek\"></div>",
            "    <div class=\"belly\"></div>",
            "    <div class=\"right-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"left-eye\">",
            "      <div class=\"sparkle\"></div>",
            "    </div>",
            "    <div class=\"blush-right\"></div>",
            "    <div class=\"blush-left\"></div>",
            "    <div class=\"beak-top\"></div>",
            "    <div class=\"beak-bottom\"></div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}
