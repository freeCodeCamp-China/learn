{
  "name": "Applied Visual Design",
  "order": 2,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7791367417b2b2512ab3",
      "title": "Create Visual Balance Using the text-align Property",
      "description": [
        "这部分课程主要关于应用视觉设计。开始的挑战展示了一些核心的原则，代码基于一个指定的卡片布局。",
        "web 内容大部分都是文本。CSS 里面的<code>text-align</code>属性可以控制文本的对齐方式。",
        "<code>text-align: justify;</code>可以让除最后一行之外的文字两端对齐，即每行的左右两端都紧贴行的边缘。",
        "<code>text-align: center;</code>可以让文本居中对齐。",
        "<code>text-align: right;</code>可以让文本右对齐。",
        "<code>text-align: left;</code>是<code>text-align</code>的默认值，它可以让文本左对齐。",
        "<hr>",
        "居中对齐<code>h4</code>标签文本，文本内容为 “Google”。两端对齐段落标签文本，文本介绍了 Google 的创立。"
      ],
      "tests": [
        {
          "text": "你应该在<code>h4</code>标签上使用 text-align 属性设置文本居中对齐。",
          "testString": "assert($('h4').css('text-align') == 'center', '你应该在<code>h4</code>标签上使用 text-align 属性设置文本居中对齐。');"
        },
        {
          "text": "你应该在<code>p</code>标签上使用 text-align 属性设置文本两端对齐。",
          "testString": "assert($('p').css('text-align') == 'justify', '你应该在<code>p</code>标签上使用 text-align 属性设置文本两端对齐。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    ",
            "  }",
            "  p {",
            "    ",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    ",
            "  }",
            "  .fullCard {",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7791367417b2b2512ab4",
      "title": "Adjust the Width of an Element Using the width Property",
      "description": [
        "你可以使用 CSS 里面的<code>width</code>属性来指定元素的宽度。属性值可以是相对单位（比如 em），绝对单位（比如 px），或者包含块（父元素）宽度的百分比。下面这个例子把图片的宽度设置为 220px：",
        "<blockquote>img {<br>&nbsp;&nbsp;width: 220px;<br>}</blockquote>",
        "<hr>",
        "给卡片添加<code>width</code>属性，设置它的宽度为 245px。使用<code>fullCark</code> class 来选择元素。"
      ],
      "tests": [
        {
          "text": "你应该使用<code>fullCard</code> class 选择器将卡片的<code>width</code>宽度属性更改为<code>245px</code>。",
          "testString": "assert(code.match(/.fullCard\\s*{[\\s\\S][^}]*\\n*^\\s*width\\s*:\\s*245px\\s*;/gm), '你应该使用<code>fullCard</code> class 选择器将卡片的<code>width</code>宽度属性更改为<code>245px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    text-align: left;",
            "  }",
            "  .fullCard {",
            "    ",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7791367417b2b2512ab5",
      "title": "Adjust the Height of an Element Using the height Property",
      "description": [
        "和<code>width</code>属性类似，你可以使用 CSS 里面的<code>height</code>属性来指定元素的高度。下面这个例子把图片的高度设置为 20px：",
        "<blockquote>img {<br>&nbsp;&nbsp;height: 20px;<br>}</blockquote>",
        "<hr>",
        "给<code>h4</code>标签添加<code>height</code>属性并设置值为 25px。"
      ],
      "tests": [
        {
          "text": "你应该设置<code>h4</code>的<code>height</code>属性，使其值为<code>25px</code>。",
          "testString": "assert($('h4').css('height') == '25px', '你应该设置<code>h4</code>的<code>height</code>属性，使其值为<code>25px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    text-align: left;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab7",
      "title": "Use the strong Tag to Make Text Bold",
      "description": [
        "术语：Strong => s => 加粗。",
        "你可以使用<code>strong</code>标签来加粗文字。添加了<code>strong</code>标签后，浏览器会自动给元素应用<code>font-weight:bold;</code>。",
        "<hr>",
        "在<code>p</code>标签里的 “斯坦福大学” 外面添加<code>strong</code>标签。"
      ],
      "tests": [
        {
          "text": "你应该有一个<code>strong</code>标签。",
          "testString": "assert($('strong').length == 1, '你应该有一个<code>strong</code>标签。');"
        },
        {
          "text": "<code>strong</code>标签应该在<code>p</code>标签里。",
          "testString": "assert($('p').children('strong').length == 1, '<code>strong</code>标签应该在<code>p</code>标签里。');"
        },
        {
          "text": "<code>strong</code>标签应该包围 “斯坦福大学”。",
          "testString": "assert($('strong').text().match(/^斯坦福大学$/gi), '<code>strong</code>标签应该包围 “斯坦福大学”。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab8",
      "title": "Use the u Tag to Underline Text",
      "description": [
        "术语：Underline => u => 下划线。",
        "你可以使用<code>u</code>标签来给文字添加下划线。添加了<code>u</code>标签后，浏览器会自动给元素应用<code>text-decoration: underline;</code>。",
        "<hr>",
        "给 “理工博士” 添加<code>u</code>标签，不要给整个 class 为<code>cardText</code>的父<code>div</code>添加。",
        "<strong>注意：</strong>锚点默认给文本添加下划线，如果<code>u</code>标签的下划线和页面的锚点混淆，请避免使用它。"
      ],
      "tests": [
        {
          "text": "你应该有一个<code>u</code>标签。",
          "testString": "assert($('u').length === 1, '你应该有一个<code>u</code>标签。');"
        },
        {
          "text": "<code>u</code>标签应该包围 “理工博士”。",
          "testString": "assert($('u').text() === '理工博士', '<code>u</code>标签应该包围 “理工博士”。');"
        },
        {
          "text": "<code>u</code>标签内不应包含额外的<code>div</code>标签。",
          "testString": "assert($('u').children('div').length === 0, '<code>u</code>标签内不应包含额外的<code>div</code>标签。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在<strong>斯坦福大学</strong>攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab9",
      "title": "Use the em Tag to Italicize Text",
      "description": [
        "术语：emphasis => em => 强调。",
        "你可以使用<code>em</code>标签来强调文本。由于浏览器会自动给元素应用<code>font-style: italic;</code>，所以文本会显示为斜体。",
        "<hr>",
        "在<code>p</code>标签里面嵌套<code>em</code>标签来强调文本。"
      ],
      "tests": [
        {
          "text": "你应该添加一个<code>em</code>标签。",
          "testString": "assert($('em').length == 1, '你应该添加一个<code>em</code>标签。');"
        },
        {
          "text": "<code>em</code>标签应该嵌套在<code>p</code>标签里面。",
          "testString": "assert($('p').children().length == 1 && $('em').children().length == 2, '<code>em</code>标签应该嵌套在<code>p</code>标签里面。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512aba",
      "title": "Use the s Tag to Strikethrough Text",
      "description": [
        "术语：Strikethrough => s => 删除线。",
        "你可以用<code>s</code>标签来给文字添加删除线，<s>我是明晃晃的删除线</s>，它代表着这段文字不再有效。添加了<code>s</code>标签后，浏览器会自动给元素应用<code>text-decoration: line-through;</code>。",
        "<hr>",
        "在<code>h4</code>标签里的 “Google” 外添加<code>s</code>标签，然后在<code>s</code>标签外面添加单词 Alphabet，Alphabet 不要有删除线格式。"
      ],
      "tests": [
        {
          "text": "你应该添加一个<code>s</code>标签。",
          "testString": "assert($('s').length == 1, '你应该添加一个<code>s</code>标签。');"
        },
        {
          "text": "<code>s</code>标签应该在<code>h4</code>标签内的 Google 文字外面，它不应该包含单词 Alphabet。",
          "testString": "assert($('s').text().match(/Google/gi) && !$('s').text().match(/Alphabet/gi), '<code>s</code>标签应该在<code>h4</code>标签内的 Google 文字外面，它不应该包含单词 Alphabet。');"
        },
        {
          "text": "<code>h4</code>标签内应该有单词 Alphabet，Alphabet 应该没有删除线样式。",
          "testString": "assert($('h4').html().match(/Alphabet/gi), '<code>h4</code>标签内应该有单词 Alphabet，Alphabet 应该没有删除线样式。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abb",
      "title": "Create a Horizontal Line Using the hr Element",
      "description": [
        "术语：Horizontal Rule => hr => 水平线。",
        "你可以用<code>hr</code>标签来创建一条宽度撑满父元素的水平线。它一般用来表示文档主题的改变，在视觉上将文档分隔成几个部分。",
        "<hr>",
        "在包含卡片标题的<code>h4</code>下面添加一个<code>hr</code>标签。",
        "<strong>注意</strong><br>在 HTML 里，<code>hr</code>是自关闭标签，所以不需要一个单独的关闭标签。"
      ],
      "tests": [
        {
          "text": "你应该添加一个<code>hr</code>标签。",
          "testString": "assert($('hr').length == 1, '你应该添加一个<code>hr</code>标签。');"
        },
        {
          "text": "<code>hr</code>标签应该在标题和段落之间。",
          "testString": "assert(code.match(/<\\/h4>\\s*?<hr(>|\\s*?\\/>)\\s*?<p>/gi), '<code>hr</code>标签应该在标题和段落之间。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4><s>Google</s>Alphabet</h4>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abc",
      "title": "Adjust the background-color Property of Text",
      "description": [
        "为了让页面更美观，除了设置整个页面的背景色以及文字颜色外，你还可以单独设置文字的背景色，即在文字的父元素上添加<code>background-color</code>属性。在本挑战里我们将使用<code>rgba()</code>颜色，而不是之前学到的<code>hex</code>编码或者<code>rgb()</code>颜色。",
        "<blockquote>rgba 代表：<br>&nbsp;&nbsp;r = red 红色<br>&nbsp;&nbsp;g = green 绿色<br>&nbsp;&nbsp;b = blue 蓝色<br>&nbsp;&nbsp;a = alpha 透明度</blockquote>",
        "RGB 值可以在 0 到 255 之间。alpha 值可以在 0 到 1 之间，其中 0 代表完全透明，1 代表完全不透明。<code>rgba()</code>非常棒，因为你可以设置颜色的透明度，这意味着你可以做出一些很漂亮的半透明效果。",
        "在本挑战里你将会用到这个代码<code>background-color: rgba(45, 45, 45, 0.1)</code>。它表示背景是黑灰色，因为设置了透明度为 0.1，所以几乎是透明的。",
        "<hr>",
        "为了让文字更醒目，设置<code>h4</code>元素的<code>background-color</code>属性值为上面指定的<code>rgba()</code>。",
        "同时移除<code>h4</code>的<code>height</code>属性，并添加<code>padding</code>属性，值为 10px。"
      ],
      "tests": [
        {
          "text": "你应该给<code>h4</code>元素添加一个<code>background-color</code>属性并且赋值<code>rgba(45, 45, 45, 0.1)</code>。",
          "testString": "assert(code.match(/background-color:\\s*?rgba\\(\\s*?45\\s*?,\\s*?45\\s*?,\\s*?45\\s*?,\\s*?0?\\.1\\s*?\\)/gi), '你应该给<code>h4</code>元素添加一个<code>background-color</code>属性并且赋值<code>rgba(45, 45, 45, 0.1)</code>。');"
        },
        {
          "text": "你应该给<code>h4</code>元素添加一个<code>padding</code>属性并且赋值<code>10px</code>。",
          "testString": "assert($('h4').css('padding-top') == '10px' && $('h4').css('padding-right') == '10px' && $('h4').css('padding-bottom') == '10px' && $('h4').css('padding-left') == '10px', '你应该给<code>h4</code>元素添加一个<code>padding</code>属性并且赋值<code>10px</code>。');"
        },
        {
          "text": "<code>h4</code>元素的<code>height</code>属性应该被移除。",
          "testString": "assert(!($('h4').css('height') == '25px'), '<code>h4</code>元素的<code>height</code>属性应该被移除。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "    ",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abd",
      "title": "Adjust the Size of a Header Versus a Paragraph Tag",
      "description": [
        "标题（<code>h1</code>到<code>h6</code>）的文字应该比的段落的文字大，这样可以让用户更直观的看到页面的布局，同时能区别出不同元素的重要程度，更方便用户捕捉关键的信息。你可以使用<code>font-size</code>属性来设置元素内文字的大小。",
        "<hr>",
        "把<code>h4</code>标签的<code>font-size</code>改成 27 像素，让标题更醒目。"
      ],
      "tests": [
        {
          "text": "你应该给<code>h4</code>元素添加一个<code>font-size</code>属性并且赋值<code>27px</code>。",
          "testString": "assert($('h4').css('font-size') == '27px', '你应该给<code>h4</code>元素添加一个<code>font-size</code>属性并且赋值<code>27px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abe",
      "title": "Add a box-shadow to a Card-like Element",
      "description": [
        "<code>box-shadow</code>属性用来给元素添加阴影，该属性值是由逗号分隔的一个或多个阴影列表。",
        "<code>box-shadow</code>属性的每个阴影依次由下面这些值描述：<ul><li><code>offset-x</code>阴影的水平偏移量；</li><li><code>offset-y</code>阴影的垂直偏移量;</li><li><code>blur-radius</code>模糊距离；</li><li><code>spread-radius</code>阴影尺寸；</li><li>颜色。</li></ul>其中<code>blur-raduis</code>和<code>spread-raduis</code>是可选的。",
        "下面是创建了多个阴影的 CSS 例子，阴影加了模糊效果，颜色是透明度很高的黑色:",
        "<blockquote>box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</blockquote>",
        "<hr>",
        "现在卡片已经添加了 id<code>thumbnail</code>。把上面的<code>box-shadow</code>值赋给卡片。"
      ],
      "tests": [
        {
          "text": "你应该给 id 为<code>thumbnail</code>的元素添加<code>box-shadow</code>属性。",
          "testString": "assert(code.match(/#thumbnail\\s*?{\\s*?box-shadow/g), '你应该给 id 为<code>thumbnail</code>的元素添加<code>box-shadow</code>属性。');"
        },
        {
          "text": "<code>box-shadow</code>值应该是指定的 CSS 值。",
          "testString": "assert(code.match(/box-shadow:\\s*?0\\s+?10px\\s+?20px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.19\\),\\s*?0\\s+?6px\\s+?6px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.23\\)/gi), '<code>box-shadow</code>值应该是指定的 CSS 值。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  ",
            "  ",
            "  ",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512abf",
      "title": "Decrease the Opacity of an Element",
      "description": [
        "CSS 里的<code>opacity</code>属性用来设置元素的透明度。",
        "<blockquote>值 1 代表完全不透明。<br>值 0.5 代表半透明。<br>值 0 代表完全透明。</blockquote>",
        "透明度会应用到元素内的所有内容，不论是图片，还是文本，或是背景色。",
        "<hr>",
        "使用<code>links</code>class 选择所有的超链接并设置其<code>opacity</code>值为 0.7。"
      ],
      "tests": [
        {
          "text": "你应该使用<code>links</code>class 选择所有的超链接并设置其<code>opacity</code>值为 0.7。",
          "testString": "assert.approximately(parseFloat($('.links').css('opacity')), 0.7, 0.1, '你应该使用<code>links</code>class 选择所有的超链接并设置其<code>opacity</code>值为 0.7。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "    ",
            "  }",
            "  #thumbnail {",
            "    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac0",
      "title": "Use the text-transform Property to Make Text Uppercase",
      "description": [
        "CSS 里面的<code>text-transform</code>属性来改变英文中字母的大小写。它通常用来统一页面里英文的显示，且无需直接改变 HTML 元素中的文本。",
        "下面的表格展示了<code>text-transform</code>的不同值对文字 “Transform me” 的影响。",
        "<table class=\"table table-striped\"><thead><th>Value<th>Result<tbody><tr><td><code>lowercase</code><td>\"transform me\"<tr><td><code>uppercase</code><td>\"TRANSFORM ME\"<tr><td><code>capitalize</code><td>\"Transform Me\"<tr><td><code>initial</code><td>使用默认值<tr><td><code>inherit</code><td>使用父元素的<code>text-transform</code>值。<tr><td><code>none</code><td><strong>Default:</strong>不改变文字。</td></table>",
        "<hr>",
        "使用<code>text-transform</code>属性把<code>h4</code>内的英文的所有字母变成大写。"
      ],
      "tests": [
        {
          "text": "<code>h4</code>内的英文的所有字母应该为大写。",
          "testString": "assert($('h4').css('text-transform') === 'uppercase', '<code>h4</code>内的英文的所有字母应该为大写。');"
        },
        {
          "text": "<code>h4</code>内的原文不能被改变。",
          "testString": "assert(($('h4').text() !== $('h4').text().toUpperCase()), '<code>h4</code>内的原文不能被改变。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "    opacity: 0.7;",
            "  }",
            "  #thumbnail {",
            "    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac2",
      "title": "Set the font-size for Multiple Heading Elements",
      "description": [
        "<code>font-size</code>属性用来指定元素内文字的大小。这个规则可以应用到多个元素上，合理的使用，能让页面的文字显示的错落有致。在本挑战里，你将要设置<code>h1</code>到<code>h6</code>的每个标题文字的大小。",
        "<hr>",
        "<ul><li>设置<code>h1</code>标签的<code>font-size</code>为 68px。</li><li>设置<code>h2</code>标签的<code>font-size</code>为 52px。</li><li>设置<code>h3</code>标签的<code>font-size</code>为 40px。</li><li>设置<code>h4</code>标签的<code>font-size</code>为 32px。</li><li>设置<code>h5</code>标签的<code>font-size</code>为 21px。</li><li>设置<code>h6</code>标签的<code>font-size</code>为 14px。</li></ul>"
      ],
      "tests": [
        {
          "text": "你应该设置<code>h1</code>标签的<code>font-size</code>为<code>68px</code>。",
          "testString": "assert($('h1').css('font-size') == '68px', '你应该设置<code>h1</code>标签的<code>font-size</code>为<code>68px</code>。');"
        },
        {
          "text": "你应该设置<code>h2</code>标签的<code>font-size</code>为<code>52px</code>。",
          "testString": "assert($('h2').css('font-size') == '52px', '你应该设置<code>h2</code>标签的<code>font-size</code>为<code>52px</code>。');"
        },
        {
          "text": "你应该设置<code>h3</code>标签的<code>font-size</code>为<code>40px</code>。",
          "testString": "assert($('h3').css('font-size') == '40px', '你应该设置<code>h3</code>标签的<code>font-size</code>为<code>40px</code>。');"
        },
        {
          "text": "你应该设置<code>h4</code>标签的<code>font-size</code>为<code>32px</code>。",
          "testString": "assert($('h4').css('font-size') == '32px', '你应该设置<code>h4</code>标签的<code>font-size</code>为<code>32px</code>。');"
        },
        {
          "text": "你应该设置<code>h5</code>标签的<code>font-size</code>为<code>21px</code>。",
          "testString": "assert($('h5').css('font-size') == '21px', '你应该设置<code>h6</code>标签的<code>font-size</code>为<code>21px</code>。');"
        },
        {
          "text": "你应该设置<code>h6</code>标签的<code>font-size</code>为<code>14px</code>。",
          "testString": "assert($('h6').css('font-size') == '14px', '你应该设置<code>h6</code>标签的<code>font-size</code>为<code>14px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  ",
            "  ",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<h1>我是 h1 文字</h1>",
            "<h2>我是 h2 文字</h2>",
            "<h3>我是 h3 文字</h3>",
            "<h4>我是 h4 文字</h4>",
            "<h5>我是 h5 文字</h5>",
            "<h6>我是 h6 文字</h6>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac3",
      "title": "Set the font-weight for Multiple Heading Elements",
      "description": [
        "在上一个挑战里你已经设置了每个标题的<code>font-size</code>，接下来你将设置<code>font-weight</code>。",
        "<code>font-weight</code>属性用于设置文本中所用的字体的粗细。",
        "<hr>",
        "<ul><li>设置<code>h1</code>标签的<code>font-weight</code>为 800。</li><li>设置<code>h2</code>标签的<code>font-weight</code>为 600。</li><li>设置<code>h3</code>标签的<code>font-weight</code>为 500。</li><li>设置<code>h4</code>标签的<code>font-weight</code>为 400。</li><li>设置<code>h5</code>标签的<code>font-weight</code>为 300。</li><li>设置<code>h6</code>标签的<code>font-weight</code>为 200。</li></ul>"
      ],
      "tests": [
        {
          "text": "你应该设置<code>h1</code>标签的<code>font-weight</code>为 800。",
          "testString": "assert($('h1').css('font-weight') == '800', '你应该设置<code>h1</code>标签的<code>font-weight</code>为 800。');"
        },
        {
          "text": "你应该设置<code>h2</code>标签的<code>font-weight</code>为 600。",
          "testString": "assert($('h2').css('font-weight') == '600', '你应该设置<code>h2</code>标签的<code>font-weight</code>为 600。');"
        },
        {
          "text": "你应该设置<code>h3</code>标签的<code>font-weight</code>为 500。",
          "testString": "assert($('h3').css('font-weight') == '500', '你应该设置<code>h3</code>标签的<code>font-weight</code>为 500。');"
        },
        {
          "text": "你应该设置<code>h4</code>标签的<code>font-weight</code>为 400。",
          "testString": "assert($('h4').css('font-weight') == '400', '你应该设置<code>h4</code>标签的<code>font-weight</code>为 400。');"
        },
        {
          "text": "你应该设置<code>h5</code>标签的<code>font-weight</code>为 300。",
          "testString": "assert($('h5').css('font-weight') == '300', '你应该设置<code>h5</code>标签的<code>font-weight</code>为 300。');"
        },
        {
          "text": "你应该设置<code>h6</code>标签的<code>font-weight</code>为 200。",
          "testString": "assert($('h6').css('font-weight') == '200', '你应该设置<code>h6</code>标签的<code>font-weight</code>为 200。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h1 {",
            "    font-size: 68px;",
            "    ",
            "  }",
            "  h2 {",
            "    font-size: 52px;",
            "    ",
            "  }",
            "  h3 {",
            "    font-size: 40px;",
            "    ",
            "  }",
            "  h4 {",
            "    font-size: 32px;",
            "    ",
            "  }",
            "  h5 {",
            "    font-size: 21px;",
            "    ",
            "  }",
            "  h6 {",
            "    font-size: 14px;",
            "    ",
            "  }",
            "</style>",
            "<h1>我是 h1 文字</h1>",
            "<h2>我是 h2 文字</h2>",
            "<h3>我是 h3 文字</h3>",
            "<h4>我是 h4 文字</h4>",
            "<h5>我是 h5 文字</h5>",
            "<h6>我是 h6 文字</h6>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac4",
      "title": "Set the font-size of Paragraph Text",
      "description": [
        "CSS 里面的<code>font-size</code>属性不只限于标题，它可以应用于任何包含文字的元素内。",
        "<hr>",
        "把段落的<code>font-size</code>设置为 16px 让它看起来更清晰。"
      ],
      "tests": [
        {
          "text": "你的<code>p</code>标签应该包含一个<code>font-size</code>属性并且值为<code>16px</code>。",
          "testString": "assert($('p').css('font-size') == '16px', '你的<code>p</code>标签应该包含一个<code>font-size</code>属性并且值为<code>16px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  p {",
            "    font-size: 10px;",
            "  }",
            "</style>",
            "<p>",
            "  天地玄黄　宇宙洪荒　日月盈昃　辰宿列张　寒来暑往　秋收冬藏　闰余成岁　律召调阳　云腾致雨　露结为霜　金生丽水　玉出昆冈　剑号巨阙　珠称夜光　果珍李柰　菜重芥姜　海咸河淡　鳞潜羽翔　龙师火帝　鸟官人皇　始制文字　乃服衣裳　推位让国　有虞陶唐　吊民伐罪　周发殷汤　坐朝问道　垂拱平章　爱育黎首　臣伏戎羌　遐迩壹体　率宾归王　鸣凤在树　白驹食场　化被草木　赖及万方　盖此身发　四大五常　恭惟鞠养　岂敢毁伤　女慕贞絜　男效才良　知过必改　得能莫忘　罔谈彼短　靡恃己长　信使可覆　器欲难量　墨悲丝染　诗讃羔羊",
            "</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781d367417b2b2512ac5",
      "title": "Set the line-height of Paragraphs",
      "description": [
        "CSS 提供<code>line-height</code>属性来设置行间的距离。行高，顾名思义，用来设置每行文字所占据的垂直空间。",
        "<hr>",
        "给<code>p</code>标签添加<code>line-height</code>属性并赋值 25px。"
      ],
      "tests": [
        {
          "text": "你应该给<code>p</code>标签添加<code>line-height</code>属性并赋值<code>25px</code>。",
          "testString": "assert($('p').css('line-height') == '25px', '你应该给<code>p</code>标签添加<code>line-height</code>属性并赋值<code>25px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  p {",
            "    font-size: 16px;",
            "    ",
            "  }",
            "</style>",
            "<p>",
            "  天地玄黄　宇宙洪荒　日月盈昃　辰宿列张　寒来暑往　秋收冬藏　闰余成岁　律召调阳　云腾致雨　露结为霜　金生丽水　玉出昆冈　剑号巨阙　珠称夜光　果珍李柰　菜重芥姜　海咸河淡　鳞潜羽翔　龙师火帝　鸟官人皇　始制文字　乃服衣裳　推位让国　有虞陶唐　吊民伐罪　周发殷汤　坐朝问道　垂拱平章　爱育黎首　臣伏戎羌　遐迩壹体　率宾归王　鸣凤在树　白驹食场　化被草木　赖及万方　盖此身发　四大五常　恭惟鞠养　岂敢毁伤　女慕贞絜　男效才良　知过必改　得能莫忘　罔谈彼短　靡恃己长　信使可覆　器欲难量　墨悲丝染　诗讃羔羊",
            "</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781d367417b2b2512ac8",
      "title": "Adjust the Hover State of an Anchor Tag",
      "description": [
        "本挑战将要涉及到伪类。伪类是可以添加到选择器上的关键字，用来选择元素的指定状态。",
        "比如，超链接可以使用<code>:hover</code>伪类选择器定义它的悬停状态样式。下面是悬停超链接时改变超链接颜色的 CSS：",
        "<blockquote>a:hover {<br>&nbsp;&nbsp;color: red;<br>}</blockquote>",
        "<hr>",
        "代码编辑器里面已经有了一个 CSS 规则把所有的<code>a</code>标签定义成了黑色。添加一个规则，满足如下，当用户悬停<code>a</code>标签时，把<code>color</code>变成蓝色。"
      ],
      "tests": [
        {
          "text": "超链接的<code>color</code>应该保持黑色，只添加<code>:hover</code> CSS 规则。",
          "testString": "assert($('a').css('color') == 'rgb(0, 0, 0)', '超链接的<code>color</code>应该保持黑色，只添加<code>:hover</code> CSS 规则。');"
        },
        {
          "text": "悬停超链接时超链接<code>color</code>应该变成蓝色。",
          "testString": "assert(code.match(/a:hover\\s*?{\\s*?color:\\s*?blue;\\s*?}/gi), '悬停超链接时超链接<code>color</code>应该变成蓝色。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  a {",
            "    color: #000;",
            "  }",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<a href=\"http://freecatphotoapp.com/\" target=\"_blank\">猫咪相册 App</a>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512ac9",
      "title": "Change an Element's Relative Position",
      "description": [
        "在 CSS 里一切 HTML 元素皆为盒子，也就是通常所说的<code>盒模型</code>。块级元素自动从新的一行开始（比如标题、段落以及 div），行内元素排列在上一个元素后（比如图片以及 span）。元素默认按照这种方式布局称为文档的<code>普通流</code>，同时 CSS 提供了 position 属性来覆盖它。",
        "当元素的 position 设置为<code>relative</code>时，它允许你通过 CSS 指定该元素在当前普通流页面下的相对偏移量。 CSS 里控制各个方向偏移量的对应的属性是<code>left</code>、<code>right</code>、<code>top</code>和<code>bottom</code>。它们代表着从原来的位置向对应的方向偏移指定的像素、百分比或者 ems。下面的例子展示了段落向上偏移 10 像素：",
        "<blockquote>p {<br>&nbsp;&nbsp;position: relative;<br>&nbsp;&nbsp;bottom: 10px;<br>}</blockquote>",
        "把元素的 position 设置成 relative 并不会改变该元素在普通流布局所占的位置，也不会对其它元素的位置产生影响。",
        "<strong>注意</strong><br>定位可以让你在页面布局上更灵活、高效。注意不管元素的定位是怎样，内部的 HTML 代码阅读起来应该是整洁、有意义的。这样也可以让视障人员（他们重度依赖辅助设备比如屏幕阅读软件）能够浏览你的网页。",
        "<hr>",
        "把<code>h2</code>的<code>position</code>设置成<code>relative</code>，使用相应的 CSS 属性调整<code>h2</code>的位置，使其向下偏移 15 像素，同时还在普通流中占据原来的位置。注意不要对 h1 和 p 元素的位置产生影响。"
      ],
      "tests": [
        {
          "text": "<code>h2</code>元素应该添加<code>position</code>属性并赋值<code>relative</code>。",
          "testString": "assert($('h2').css('position') == 'relative', '<code>h2</code>元素应该添加<code>position</code>属性并赋值<code>relative</code>。');"
        },
        {
          "text": "你应该使用 CSS 属性调整<code>h2</code>的位置使其从原来的位置向下偏移<code>15px</code>。",
          "testString": "assert($('h2').css('top') == '15px', '你应该使用 CSS 属性调整<code>h2</code>的位置使其从原来的位置向下偏移<code>15px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h2 {",
            "    ",
            "    ",
            "  }",
            "</style>",
            "<body>",
            "  <h1>论如何优雅定位</h1>",
            "  <h2>我要离 h1 远一点！</h2>",
            "  <p>我觉得 h2 没变，还是在它原来的位置，相离莫相忘，且行且珍惜。</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512aca",
      "title": "Move a Relatively Positioned Element with CSS Offsets",
      "description": [
        "CSS 里面的<code>top</code>、<code>bottom</code>、<code>left</code>和<code>right</code>定义了元素在相应方位的偏移距离。元素将从当前位置，向属性相反的方向偏移。就像你在上一个挑战看到的，<code>top</code>属性使<code>h2</code>向下移动。<code>left</code>属性使元素向右移动。",
        "<img src='https://i.imgur.com/eWWi3gZ.gif' alt='' />",
        "<hr>",
        "通过 CSS 属性把<code>h2</code>向上移动 10 像素，向右移动 15 像素。"
      ],
      "tests": [
        {
          "text": "你应该使用 CSS 属性使<code>h2</code>相对当前位置向上移动<code>10px</code>。也就是说，从<code>h2</code>当前位置远离<code>bottom</code><code>10px</code>。",
          "testString": "assert($('h2').css('bottom') == '10px', '你应该使用 CSS 属性使<code>h2</code>相对当前位置向上移动<code>10px</code>。也就是说，从<code>h2</code>当前位置远离<code>bottom</code><code>10px</code>。');"
        },
        {
          "text": "你应该使用 CSS 属性使<code>h2</code>相对当前位置向右移动<code>15px</code>。也就是说，从<code>h2</code>当前位置远离<code>left</code><code>15px</code>。",
          "testString": "assert($('h2').css('left') == '15px', '你应该使用 CSS 属性使<code>h2</code>相对当前位置向右移动<code>15px</code>。也就是说，从<code>h2</code>当前位置远离<code>left</code><code>15px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<head>",
            "<style>",
            "  h2 {",
            "    position: relative;",
            "    ",
            "    ",
            "  }",
            "</style>",
            "</head>",
            "<body>",
            "  <h1>论如何优雅定位</h1>",
            "  <h2>我要离 h1 近一点！</h2>",
            "  <p>我觉得 h2 没变，还是在它原来的位置，相离莫相忘，且行且珍惜。</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512acb",
      "title": "Lock an Element to its Parent with Absolute Positioning",
      "description": [
        "接下来要介绍 CSS<code>position</code>属性的取值选项<code>absolute</code>，<code>absolute</code>相对于其包含块定位。和<code>relative</code>定位不一样，<code>absolute</code>定位会将元素从当前的文档流里面移除，周围的元素会忽略它。可以用 CSS 的 top、bottom、left 和 right 属性来调整元素的位置。",
        "<code>absolute</code>定位比较特殊的一点是元素的定位参照于最近的已定位祖先元素。如果它的父元素没有添加定位规则（默认是<code>position:relative;</code>）,浏览器会继续寻找直到默认的 body 标签。",
        "<hr>",
        "通过声明<code>position</code>为<code>absolute</code>，固定<code>#searchbar</code>元素到它父元素<code>section</code>的右上角。即设定其<code>top</code>和<code>right</code>为 50 像素。"
      ],
      "tests": [
        {
          "text": "<code>#searchbar</code>元素应当有一个值为<code>absolute</code>的<code>position</code>CSS 属性。",
          "testString": "assert($('#searchbar').css('position') == 'absolute', '<code>#searchbar</code> 元素应当有一个值为<code>absolute</code>的<code>position</code>CSS 属性。');"
        },
        {
          "text": "你的<code>#searchbar</code>元素应当有值为<code>50px</code>的<code>top</code>CSS 属性。",
          "testString": "assert($('#searchbar').css('top') == '50px', '你的<code>#searchbar</code>元素应当有值为<code>50px</code>的<code>top</code>CSS 属性。');"
        },
        {
          "text": "你的<code>#searchbar</code>元素应当有值为<code>50px</code>的<code>right</code>CSS 属性。",
          "testString": "assert($('#searchbar').css('right') == '50px', '你的<code>#searchbar</code>元素应当有值为<code>50px</code>的<code>right</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  #searchbar {",
            "    ",
            "    ",
            "    ",
            "  }",
            "  section {",
            "    position: relative;",
            "  }",
            "</style>",
            "<body>",
            "  <h1>欢迎！</h1>",
            "  <section>",
            "    <form id=\"searchbar\">",
            "      <label for=\"search\">搜索：</label>",
            "      <input type=\"search\" id=\"search\" name=\"search\">",
            "      <input type=\"submit\" name=\"submit\" value=\"Go!\">",
            "    </form>",
            "  </section>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512acc",
      "title": "Lock an Element to the Browser Window with Fixed Positioning",
      "description": [
        "接下来要介绍的是<code>fixed</code>定位，它是一种特殊的绝对（absolute）定位，区别是其包含块是浏览器窗口。和绝对定位类似，<code>fixed</code>定位使用 top、bottom、left 和 right 属性来调整元素的位置，并且会将元素从当前的文档流里面移除，其它元素会忽略它的存在。",
        "<code>fixed</code>定位和<code>absolute</code>定位的最明显的区别是<code>fixed</code>定位元素不会随着屏幕滚动而移动。",
        "<hr>",
        "代码里的导航栏已经添加了值为<code>navbar</code>的 id。把它的<code>position</code>设置成<code>fixed</code>，设定其<code>top</code>和<code>left</code>为 0 像素。注意观察对<code>h1</code>的影响，<code>h1</code>并没有被导航栏挤下来，而是遮盖住了，为了显示完全需要单独调整<code>h1</code>的位置。"
      ],
      "tests": [
        {
          "text": "<code>>#navbar</code>元素应当有一个值为<code>fixed</code>的<code>position</code>CSS 属性",
          "testString": "assert($('#navbar').css('position') == 'fixed', '<code>#navbar</code>元素应当有一个值为<code>fixed</code>的<code>position</code>CSS 属性');"
        },
        {
          "text": "你的<code>#navbar</code>元素应当有值为<code>0px</code>的<code>top</code>CSS 属性。",
          "testString": "assert($('#navbar').css('top') == '0px', '你的<code>#navbar</code>元素应当有值为<code>0px</code>的<code>top</code>CSS 属性。');"
        },
        {
          "text": "你的<code>#navbar</code>元素应当有值为<code>0px</code>的<code>left</code>CSS 属性。",
          "testString": "assert($('#navbar').css('left') == '0px', '你的<code>#navbar</code>元素应当有值为<code>0px</code>的<code>left</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  #navbar {",
            "    ",
            "    ",
            "    ",
            "    width: 100%;",
            "    background-color: #767676;",
            "  }",
            "  nav ul {",
            "    margin: 0px;",
            "    padding: 5px 0px 5px 30px;",
            "  }",
            "  nav li {",
            "    display: inline;",
            "    margin-right: 20px;",
            "  }",
            "  a {",
            "    text-decoration: none;",
            "  }",
            "</style>",
            "<body>",
            "  <header>",
            "    <h1>欢迎!</h1>",
            "    <nav id=\"navbar\">",
            "      <ul>",
            "        <li><a href=\"\">网站首页</a></li>",
            "        <li><a href=\"\">联系我们</a></li>",
            "      </ul>",
            "    </nav>",
            "  </header>",
            "  <p>当导航条固定在浏览器窗口上时，我会上移。</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ace",
      "title": "Push Elements Left or Right with the float Property",
      "description": [
        "接下来要介绍的定位机制并不是<code>position</code>属性的选项，它通过元素的<code>float</code>属性来设置。浮动元素不在文档流中，它向左或向右浮动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。通常需要用<code>width</code>属性来指定浮动元素占据的水平空间。",
        "<hr>",
        "设置<code>#left</code>元素的<code>float</code>为<code>left</code>，设置<code>#right</code>元素的<code>float</code>为<code>right</code>。使这两个元素按两列布局，<code>section</code>和<code>aside</code>左右排列。"
      ],
      "tests": [
        {
          "text": "id 为<code>left</code>的元素应该有一个值为<code>left</code>的<code>float</code>CSS 属性。",
          "testString": "assert($('#left').css('float') == 'left', 'id 为<code>left</code>的元素应该有一个值为<code>left</code>的<code>float</code>CSS 属性。');"
        },
        {
          "text": "id 为<code>right</code>的元素应该有一个值为<code>right</code>的<code>float</code>CSS 属性。",
          "testString": "assert($('#right').css('float') == 'right', 'id 为<code>right</code>的元素应该有一个值为<code>right</code>的<code>float</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<head>",
            "  <style>",
            "  #left {",
            "    ",
            "    width: 50%;",
            "  }",
            "  #right {",
            "    ",
            "    width: 40%;",
            "  }",
            "  aside, section {",
            "    padding: 2px;",
            "    background-color: #ccc;",
            "  }",
            "  </style>",
            "</head>",
            "<body>",
            "  <header>",
            "    <h1>欢迎！</h1>",
            "  </header>",
            "  <section id=\"left\">",
            "    <h2>内容</h2>",
            "    <p>好样的</p>",
            "  </section>",
            "  <aside id=\"right\">",
            "    <h2>侧边栏</h2>",
            "    <p>一些链接</p>",
            "  </aside>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512acf",
      "title": "Change the Position of Overlapping Elements with the z-index Property",
      "description": [
        "当一些元素重叠时，在 HTML 里后出现的元素会默认显示在更早出现的元素的上面。你可以使用<code>z-index</code>属性指定元素的堆叠次序。<code>z-index</code>的取值是整数，数值大的元素优先于数值小的元素显示。",
        "<hr>",
        "给 class 为<code>first</code>的元素（红色的方块）添加<code>z-index</code>属性并赋值为 2，使它显示在蓝色方块的上方。"
      ],
      "tests": [
        {
          "text": "class 为<code>first</code>的元素的<code>z-index</code>值应该为 2。",
          "testString": "assert($('.first').css('z-index') == '2', 'class 为<code>first</code>的元素的<code>z-index</code>值应该为 2。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    width: 60%;",
            "    height: 200px;",
            "    margin-top: 20px;",
            "  }",
            "  ",
            "  .first {",
            "    background-color: red;",
            "    position: absolute;",
            "    ",
            "  }",
            "  .second {",
            "    background-color: blue;",
            "    position: absolute;",
            "    left: 40px;",
            "    top: 50px;",
            "    z-index: 1;",
            "  }",
            "</style>",
            "",
            "<div class=\"first\"></div>",
            "<div class=\"second\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ad0",
      "title": "Center an Element Horizontally Using the margin Property",
      "description": [
        "在应用设计中经常需要把一个块级元素水平居中显示。一种常见的实现方式是把块级元素的<code>margin</code>值设置为<code>auto</code>。",
        "同样的，这个方法也对图片奏效。图片默认是级联元素，但是可以通过设置其<code>display</code>属性为<code>block</code>来把它变成块级元素。",
        "<hr>",
        "通过给页面中的<code>div</code>添加值为<code>auto</code>的<code>margin</code>属性将其居中显示。"
      ],
      "tests": [
        {
          "text": "<code>div</code>的<code>margin</code>应该为<code>auto</code>。",
          "testString": "assert(code.match(/margin:\\s*?auto;/g), '<code>div</code>的<code>margin</code>应该为<code>auto</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    background-color: blue;",
            "    height: 100px;",
            "    width: 100px;",
            "    ",
            "  }",
            "</style>",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ad1",
      "title": "Learn about Complementary Colors",
      "description": [
        "色彩理论以及设计色彩学很复杂，这里将只涉及很基础的部分。在网站设计里，颜色能让内容更醒目，能调动情绪，从而创造舒适的视觉体验。不同的颜色组合对网站的视觉效果影响很大，精妙的设计都需要适宜的颜色来美化页面内容。",
        " 一半是科学，一半是艺术，色环是我们认识颜色关系的好工具 - 它是一个近色相邻异色相离的圆环。当两个颜色恰好在色环的两端时，这两个颜色叫做补色。绘画中两只补色在混合后会变成灰色。补色搭配能形成强列的对比效果，传达出活力、能量、兴奋等意义。",
        "下面是一些十六进制码（hex code）补色的例子：",
        "<blockquote>红色（#FF0000）和蓝绿色 (#00FFFF)<br>绿色（#00FF00）和品红色（#FF00FF）<br>蓝色（#0000FF）和黄色（#FFFF00）</blockquote>",
        "现在很多的在线选色工具都有寻找补色的功能。",
        "<strong>注意</strong><br>对于所有的颜色关卡： 颜色能吸引用户的注意，但不是唯一的方式，切勿喧宾夺主，过度使用会适得其反。详细会在 Applied Accessibility 章节介绍。",
        "<hr>",
        "把<code>blue</code>和<code>yellow</code>class 的<code>background-color</code>属性改成相应的颜色。注意观察它们之间的编码区别以及和它们和白色的编码区别。"
      ],
      "tests": [
        {
          "text": "class 为<code>blue</code>的<code>div</code>元素应该有值为蓝色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'class 为<code>blue</code>的<code>div</code>元素应该有值为蓝色的<code>background-color</code>CSS 属性。');"
        },
        {
          "text": "class 为<code>yellow</code>的<code>div</code>元素应该有值为黄色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.yellow').css('background-color') == 'rgb(255, 255, 0)', 'class 为<code>yellow</code>的<code>div</code>元素应该有值为黄色的<code>background-color</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  .blue {",
            "    background-color: #000000;",
            "  }",
            "  .yellow {",
            "    background-color: #000000;",
            "  }",
            "  div {",
            "    display: inline-block;",
            "    height: 100px;",
            "    width: 100px;",
            "  }",
            "</style>",
            "<div class=\"blue\"></div>",
            "<div class=\"yellow\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad2",
      "title": "Learn about Tertiary Colors",
      "description": [
        "电脑显示器和手机屏幕是一种加色模型，将红（R）、绿（G）、蓝（B）三原色的色光以不同的比例相加，以产生多种多样的色光。两种原色相加产生二次色：蓝绿（G+B）、品红（R+B）和黄色（R+G）。你在上一个挑战里已经见过这些颜色了。这些二次色恰好是在合成它们时未使用的原色的补色，即在色环中位于两端。例如，品红色是红色和蓝色相加产生，它是绿色的补色。",
        "三次色是由原色和二次色相加产生的颜色，例如红色（原色）和黄色（二次色）相加产生橙色。将这六种颜色中相邻的颜色相加，便产生了十二色色环。",
        "设计里面有很多种颜色搭配方法。涉及到三次色的一种配色方法是分裂补色搭配法。选定主色之后，在色环上选择与它的补色相邻的两种颜色与之搭配。此种搭配既有对比，又不失和谐。",
        "下面是使用分裂补色搭配法创建的三个颜色：",
        "<table class=\"table table-striped\"><thead><tr><th>颜色</th><th>HEX 颜色码</th></tr><thead><tbody><tr><td>橙色</td><td>#FF7D00</td></tr><tr><td>蓝绿色</td><td>#00FFFF</td></tr><tr><td>树莓红</td><td>#FF007D</td></tr></tbody></table>",
        "<hr>",
        "把 class 为<code>orange</code>、<code>cyan</code>和<code>rasberry</code>的<code>background-color</code>改成其对应的颜色。由于 rasberry 不在浏览器 17 种标准色之内，不能直接用作颜色名，所以要使用 HEX 颜色码。"
      ],
      "tests": [
        {
          "text": "class 为<code>orange</code>的<code>div</code>应该有值为橙色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.orange').css('background-color') == 'rgb(255, 125, 0)', 'class 为<code>orange</code>的<code>div</code>应该有值为橙色的<code>background-color</code>CSS 属性。');"
        },
        {
          "text": "class 为<code>cyan</code>的<code>div</code>应该有值为蓝绿色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'class 为<code>cyan</code>的<code>div</code>应该有值为蓝绿色的<code>background-color</code>CSS 属性。');"
        },
        {
          "text": "class 为<code>raspberry</code>的<code>div</code>应该有值为树莓红色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.raspberry').css('background-color') == 'rgb(255, 0, 125)', 'class 为<code>raspberry</code>的<code>div</code>应该有值为树莓红色的<code>background-color</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  ",
            "  .orange {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .cyan {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .raspberry {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  div {",
            "    height: 100px;",
            "    width: 100px;",
            "    margin-bottom: 5px;",
            "  }",
            "</style>",
            "  ",
            "<div class=\"orange\"></div>",
            "<div class=\"cyan\"></div>",
            "<div class=\"raspberry\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad3",
      "title": "Adjust the Color of Various Elements to Complementary Colors",
      "description": [
        "通过前面关卡的学习，我们知道了补色搭配能形成强列的对比效果，让内容更富生机。但是如果使用不当效果会适得其反，比如如果文字背景色和文字颜色互为补色，文字会很难看清。通常的做法是，一种颜色做为主要颜色，其补色用来装点页面。",
        "<hr>",
        "使用深青色（<code>#09A7A1</code>）做为页面主色，用其补色橙色（<code>#FF790E</code>）来装饰登录按钮。把<code>header</code>和<code>footer</code>的<code>background-color</code>从黑色改成深青色。然后把<code>h2</code>的文字<code>corlor</code>也改成深青色。最后，把<code>button</code>的<code>background-color</code>改成橙色。"
      ],
      "tests": [
        {
          "text": "<code>header</code>元素应该有一个值为<code>#09A7A1</code>的<code>background-color</code>CSS 属性。",
          "testString": "assert($('header').css('background-color') == 'rgb(9, 167, 161)', '<code>header</code>元素应该有一个值为<code>#09A7A1</code>的<code>background-color</code>CSS 属性。');"
        },
        {
          "text": "<code>footer</code>元素应该有一个值为<code>#09A7A1</code>的<code>background-color</code>CSS 属性。",
          "testString": "assert($('footer').css('background-color') == 'rgb(9, 167, 161)', '<code>footer</code>元素应该有一个值为<code>#09A7A1</code>的<code>background-color</code>CSS 属性。');"
        },
        {
          "text": "<code>h2</code>元素应该有一个值为<code>#09A7A1</code>的<code>color</code>CSS 属性。",
          "testString": "assert($('h2').css('color') == 'rgb(9, 167, 161)', '<code>h2</code>元素应该有一个值为<code>#09A7A1</code>的<code>color</code>CSS 属性。');"
        },
        {
          "text": "<code>button</code>元素应该有一个值为<code>#FF790E</code>的<code>background-color</code>CSS 属性。",
          "testString": "assert($('button').css('background-color') == 'rgb(255, 121, 14)', '<code>button</code>元素应该有一个值为<code>#FF790E</code>的<code>background-color</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: white;",
            "  }",
            "  header {",
            "    background-color: black;",
            "    color: white;",
            "    padding: 0.25em;",
            "  }",
            "  h2 {",
            "    color: black;",
            "  }  ",
            "  button {",
            "    background-color: white;",
            "  }",
            "  footer {",
            "    background-color: black;",
            "    color: white;",
            "    padding: 0.5em;",
            "  }",
            "</style>",
            "<header>",
            "  <h1>FCC 中国</h1>",
            "</header>",
            "<main>",
            "  <article>",
            "    <h2>FCC 成都社区</h2>",
            "    <p>【FCC成都社区】是一个非营利性的公益性技术社区，由一群编程技术爱好者，利用业余时间搭建的一个友好的交流、学习、互助的平台，帮助开发者、技术爱好者提升个人技术能力，同时帮助企业解决人才问题。</p>",
            "    <button><a href=\"https://freecodecamp-chengdu.github.io/\" target=\"_blank\">更多</a></button>",
            "  </article>",
            "  <article>",
            "    <h2>FCC 深圳社区</h2>",
            "    <p>【FCC 深圳社区】全称 freeCodeCamp 深圳社区，面向深圳所有有意学习编程、热爱编程、甚至想要通过编程找到一份好工作的学生和社会群众，传承 freeCodeCamp 中文社区的主旨思想，倡导人人皆可编程。</p>",
            "    <button><a href=\"https://freecodecamp-shenzhen.github.io/\" target=\"_blank\">更多</a></button>",
            "  </article>",
            "</main>",
            "<br>",
            "<footer>&copy;2018 FCC 中国</footer>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad4",
      "title": "Adjust the Hue of a Color",
      "description": [
        "HSL 色彩空间模型是一种将 RGB 色彩模型中的点放在圆柱坐标系中的表示法，描述了色相（hue）、饱和度（saturation）、亮度（lightness）。CSS3 引入了对应的<code>hsl()</code>属性做为对应的颜色描述方式。",
        "<b>色相</b>是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。以颜色光谱为例，光谱左边从红色开始，移动到中间的绿色，一直到右边的蓝色，色相值就是沿着这条线的取值。在<code>hsl()</code>里面，色相用色环来代替光谱，色相值就是色环里面的颜色对应的从 0 到 360 度的角度值。",
        "<b>饱和度</b>是指色彩的纯度，也就是颜色里灰色的占比，越高色彩越纯，低则逐渐变灰，取0-100%的数值。",
        "<b>亮度</b>决定颜色的明暗程度，也就是颜色里白色或者黑色的占比，100% 亮度是白色， 0% 亮度是黑色，而 50% 亮度是“一般的”。 ",
        "下面是一些使用<code>hsl()</code>描述颜色的例子，颜色都为满饱和度，中等亮度:",
        "<table class=\"table table-striped\"><thead><tr><th>颜色</th><th>HSL</th></tr></thead><tbody><tr><td>红</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>黄</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>绿</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>蓝绿</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>品红</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table>",
        "<hr>",
        "把 class 为<code>green</code>、<code>cyan</code>和<code>blue</code><code>div</code>的<code>background-color</code>使用<code>hsl()</code>表示法描述相应的颜色。颜色都为满饱和度，亮度中等。"
      ],
      "tests": [
        {
          "text": "你应该使用<code>hsl()</code>属性来表示绿色。",
          "testString": "assert(code.match(/\\.green\\s*?{\\s*?background-color:\\s*?hsl/gi), '你应该使用<code>hsl()</code>属性来表示绿色。');"
        },
        {
          "text": "你应该使用<code>hsl()</code>属性来表示蓝绿色。",
          "testString": "assert(code.match(/\\.cyan\\s*?{\\s*?background-color:\\s*?hsl/gi), '你应该使用<code>hsl()</code>属性来表示蓝绿色。');"
        },
        {
          "text": "你应该使用<code>hsl()</code>属性来表示蓝色。",
          "testString": "assert(code.match(/\\.blue\\s*?{\\s*?background-color:\\s*?hsl/gi), '你应该使用<code>hsl()</code>属性来表示蓝色。');"
        },
        {
          "text": "class 为<code>green</code>的<code>div</code>应该有绿色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.green').css('background-color') == 'rgb(0, 255, 0)', 'class 为<code>green</code>的<code>div</code>应该有绿色的<code>background-color</code>CSS 属性。');"
        },
        {
          "text": "class 为<code>cyan</code>的<code>div</code>应该有蓝绿色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'class 为<code>cyan</code>的<code>div</code>应该有蓝绿色的<code>background-color</code>CSS 属性。');"
        },
        {
          "text": "class 为<code>blue</code>的<code>div</code>应该有蓝色的<code>background-color</code>CSS 属性。",
          "testString": "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'class 为<code>cyan</code>的<code>div</code>应该有蓝色的<code>background-color</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  ",
            "  .green {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .cyan {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .blue {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  div {",
            "    display: inline-block;",
            "    height: 100px;",
            "    width: 100px;",
            "  }",
            "</style>",
            "  ",
            "<div class=\"green\"></div>",
            "<div class=\"cyan\"></div>",
            "<div class=\"blue\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad5",
      "title": "Adjust the Tone of a Color",
      "description": [
        "<code>hsl()</code>使 CSS 更改色调更方便。给纯色添加白色可以创造更浅的色调，添加黑色可以创造更深的色调。另外，还可以通过给纯色添加灰色来同时改变颜色的深浅和明暗。回忆下<code>hsl()</code>里面的‘s’和‘l’分辨代表饱和度和亮度。饱和度代表灰色的占比，亮度代表白色和黑色的占比。这在当你有了一个基色调却需要微调时非常有用。",
        "<hr>",
        "页面的导航栏目前继承了<code>header</code>的<code>background-color</code>。改变<code>nav</code>元素的<code>background-color</code>，保留基色蓝绿色，调整它的色调和明暗使它具有 80% 的饱和度以及 25% 的亮度。"
      ],
      "tests": [
        {
          "text": "<code>nav</code>元素应该有一个使用<code>hsl()</code>属性调节蓝绿色调的<code>background-color</code>CSS 属性。",
          "testString": "assert(code.match(/nav\\s*?{\\s*?background-color:\\s*?hsl\\(180,\\s*?80%,\\s*?25%\\)/gi), '<code>nav</code>元素应该有一个使用<code>hsl()</code>调节蓝绿色调的<code>background-color</code>CSS 属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  header {",
            "    background-color: hsl(180, 90%, 35%);",
            "    color: #FFFFFF;",
            "  }",
            "  ",
            "  nav {",
            "  ",
            "  }",
            "  ",
            "  h1 {",
            "    text-indent: 10px;",
            "    padding-top: 10px;",
            "  }",
            "  ",
            "  nav ul {",
            "    margin: 0px;",
            "    padding: 5px 0px 5px 30px;",
            "  }",
            "  ",
            "  nav li {",
            "    display: inline;",
            "    margin-right: 20px;",
            "  }",
            "  ",
            "  a {",
            "    text-decoration: none;",
            "    color: inherit;",
            "  }",
            "</style>",
            "  ",
            "<header>",
            "  <h1>FCC 中国</h1>",
            "  <nav>",
            "    <ul>",
            "      <li><a href=\"\">首页</a></li>",
            "      <li><a href=\"\">课程</a></li>",
            "      <li><a href=\"\">论坛</a></li>",
            "      <li><a href=\"\">新闻</a></li>",
            "      <li><a href=\"\">设置</a></li>",
            "    </ul>",
            "  </nav>",
            "</header>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad6",
      "title": "Create a Gradual CSS Linear Gradient",
      "description": [
        "HTML 元素的背景色并不局限于单色。CSS 还提供了颜色过渡，也就是渐变。可以通过<code>background</code>里面的<code>linear-gradient()</code>来实现线性渐变，下面是它的语法：",
        "<code>background: linear-gradient(gradient_direction, 颜色 1, 颜色 2, 颜色 3, ...);</code>",
        "第一个参数指定了颜色过渡的方向 - 它的值是角度，90deg 代表垂直渐变，45deg 的渐变角度和反斜杠方向差不多。剩下的参数指定了渐变颜色的顺序：",
        "例子：",
        "<code>background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code>",
        "<hr>",
        "使用<code>linear-gradient()</code>给<code>div</code>添加<code>background</code>渐变色，渐变角度 35deg，从<code>#CCFFFF</code>过渡到<code>#FFCCCC</code>。",
        "<strong>注意</strong><br>有很多种方式指定颜色值，如<code>rgb()</code>或者<code>hsl()</code>。在本关里请使用 hex 颜色码。"
      ],
      "tests": [
        {
          "text": "<code>div</code>元素应该有一个指定方向和颜色的<code>linear-gradient</code><code>background</code>渐变色。",
          "testString": "assert(code.match(/background:\\s*?linear-gradient\\(35deg,\\s*?(#CCFFFF|#CFF),\\s*?(#FFCCCC|#FCC)\\);/gi), '<code>div</code>元素应该有一个指定方向和颜色的<code>linear-gradient</code><code>background</code>渐变色。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  div{ ",
            "    border-radius: 20px;",
            "    width: 70%;",
            "    height: 400px;",
            "    margin: 50px auto;",
            "    ",
            "  }",
            "",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad7",
      "title": "Use a CSS Linear Gradient to Create a Striped Element",
      "description": [
        "<code>repeating-linear-gradient()</code>函数和<code>linear-gradient()</code>很像，主要区别是<code>repeating-linear-gradient()</code>重复指定的渐变。 <code>repeating-linear-gradient()</code>有很多参数，为了便于理解，本关只用到角度值和起止渐变颜色值。",
        "角度就是渐变的方向。起止渐变颜色值代表渐变颜色及其宽度值，由颜色值和起止位置组成，起止位置用百分比或者像素值表示。",
        "在代码编辑器的例子里，渐变开始于 0 像素位置的<code>yellow</code>，然后过渡到距离开始位置 40 像素的<code>blue</code>。由于下一个起止渐变颜色值的起止位置也是 40 像素，所以颜色直接渐变成第三个颜色值<code>green</code>，然后过渡到距离开始位置 80 像素的<code>red</code>。",
        "下面的代码可以帮助理解成对的起止渐变颜色值是如何过渡的。",
        "<code>0px [黄色 -- 过渡 -- 蓝色] 40px [绿色 -- 过渡 -- 红色] 80px</code>",
        "如果每对起止渐变颜色值的颜色都是相同的，由于是在两个相同的颜色间过渡，那么中间的过渡色也为同色，接着就是同色的过渡色和下一个起止颜色，最终产生的效果就是条纹。",
        "<hr>",
        "使用<code>repeating-linear-gradient()</code>函数创建一个渐变角度为 <code>45deg</code> 的条纹，然后设置第一对渐变颜色为<code>yellow</code>, 第二对渐变颜色为<code>black</code>。"
      ],
      "tests": [
        {
          "text": "<code>repeating-linear-gradient()</code>的渐变角度应该为<code>45deg</code>。",
          "testString": "assert(code.match(/background:\\s*?repeating-linear-gradient\\(\\s*?45deg/gi), '<code>repeating-linear-gradient()</code>的渐变角度应该为<code>45deg</code>。');"
        },
        {
          "text": "<code>repeating-linear-gradient()</code>的渐变角度应该不在是<code>90deg</code>。",
          "testString": "assert(!code.match(/90deg/gi), '<code>repeating-linear-gradient()</code>的渐变角度不应该是<code>90deg</code>。');"
        },
        {
          "text": "<code>0px</code>处的渐变颜色应该为<code>yellow</code>。",
          "testString": "assert(code.match(/yellow\\s+?0px/gi), '<code>0px</code>处的渐变颜色应该为<code>yellow</code>。');"
        },
        {
          "text": "<code>40px</code>处的第一个渐变颜色应该为<code>yellow</code>。",
          "testString": "assert(code.match(/yellow\\s+?40px/gi), '<code>40px</code>处的第一个渐变颜色应该为<code>yellow</code>。');"
        },
        {
          "text": "<code>40px</code>处的第二个渐变颜色应该为<code>black</code>。",
          "testString": "assert(code.match(/yellow\\s+?40px,\\s*?black\\s+?40px/gi), '<code>40px</code>处的第二个渐变颜色应该为<code>black</code>。');"
        },
        {
          "text": "<code>80px</code>处最后一个渐变颜色应该为<code>black</code>。",
          "testString": "assert(code.match(/black\\s+?80px/gi), '<code>80px</code>处最后一个渐变颜色应该为<code>black</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  div{ ",
            "    border-radius: 20px;",
            "    width: 70%;",
            "    height: 400px;",
            "    margin:  50 auto;",
            "    background: repeating-linear-gradient(",
            "      90deg,",
            "      yellow 0px,",
            "      blue 40px,",
            "      green 40px,",
            "      red 80px",
            "    );",
            "  }",
            "",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad8",
      "title": "Create Texture by Adding a Subtle Pattern as a Background Image",
      "description": [
        "添加一个精致的背景图，可以增加页面的质感，让页面更美观。关键是要找到一个平衡点，抢了内容的风头，喧宾夺主可就不妙了。<code>background</code>属性支持使用<code>url()</code>函数通过链接的方式引入一个指定纹理或样式的图片。图片链接地址在括号内，一般会用引号包起来。",
        "<hr>",
        "用<code>body</code>选择器设置整个页面的<code>background</code>为 url<code>https://i.imgur.com/MJAkxbh.png</code>指定的图片。"
      ],
      "tests": [
        {
          "text": "你的<code>body</code>元素应该有一个值为指定<code>url</code>的<code>background</code>CSS 属性。",
          "testString": "assert(code.match(/background:\\s*?url\\(\\s*(\"|'|)https:\\/\\/i\\.imgur\\.com\\/MJAkxbh\\.png\\1\\s*\\)/gi), '你的<code>body</code>选择器应包含<code>background</code>属性，且值为给定的<code>url</code>。');"
        }
      ],
      "solutions": [],
      "hints": [
        "记得把 url() 函数内的地址用引号括起来。"
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    ",
            "  }",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad9",
      "title": "Use the CSS Transform scale Property to Change the Size of an Element",
      "description": [
        "CSS 属性<code>transform</code>里面的<code>scale()</code>函数，可以用来改变元素的显示比例。下面的例子把页面的段落元素放大了 2 倍：",
        "<blockquote>p {<br>&nbsp;&nbsp;transform:scale(2);<br>}</blockquote>",
        "<hr>",
        "把 id 为<code>ball2</code>的元素放大到原始大小的 1.5 倍。"
      ],
      "tests": [
        {
          "text": "<code>#ball2</code>的<code>transform</code>属性应该为原始大小的 1.5 倍。",
          "testString": "assert(code.match(/#ball2\\s*?{\\s*?left:\\s*?65%;\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?}|#ball2\\s*?{\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?left:\\s*?65%;\\s*?}/gi), '<code>#ball2</code>的<code>transform</code>属性应该为原始大小的 1.5 倍。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .ball { ",
            "    width: 40px;",
            "    height: 40px;",
            "    margin: 50 auto;",
            "    position: fixed;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    border-radius: 50%;",
            "  }",
            "  #ball1 {",
            "    left: 20%;",
            "  }",
            "  #ball2 {",
            "    left: 65%;",
            "    ",
            "  }",
            "",
            "",
            "</style>",
            "",
            "<div class=\"ball\" id= \"ball1\"></div>",
            "<div class=\"ball\" id= \"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ada",
      "title": "Use the CSS Transform scale Property to Scale an Element on Hover",
      "description": [
        "<code>transform</code>属性有很多函数，可以对元素进行调整大小、移动、旋转、翻转等操作。当使用伪类描述元素的指定状态如<code>:hover</code>时，<code>transform</code>属性可以方便的给元素添加交互。",
        "下面是当用户悬停段落元素时，段落大小缩放到原始大小 2.1 倍的例子：",
        "<blockquote>p:hover {<br>&nbsp;&nbsp;transform: scale(2.1);<br>}</blockquote>",
        "<hr>",
        "给<code>div</code>伪类<code>hover</code>添加<code>transform</code>属性，使其当鼠标悬停时大小缩放到原始大小的 1.1 倍。"
      ],
      "tests": [
        {
          "text": "<code>div</code>元素在悬停时大小应该缩放到原始大小的 1.1 倍。",
          "testString": "assert(code.match(/div:hover\\s*?{\\s*?transform:\\s*?scale\\(1\\.1\\);/gi), '<code>div</code>元素在悬停时大小应该缩放到原始大小的 1.1 倍。');"
        }
      ],
      "solutions": [],
      "hints": [
        "确保使用 div:hover 添加悬停规则。"
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin:  50px auto;",
            "    background: linear-gradient(",
            "      53deg,",
            "      #ccfffc,",
            "      #ffcccf",
            "    );",
            "  }",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512adb",
      "title": "Use the CSS Transform Property skewX to Skew an Element Along the X-Axis",
      "description": [
        "接下来要介绍的<code>transform</code>属性是<code>skewX</code>，<code>skewX</code>使选择的元素沿着 X 轴（横向）翻转指定的角度。",
        "下面的代码沿着 X 轴翻转段落元素 -32 度。",
        "<blockquote>p {<br>&nbsp;&nbsp;transform: skewX(-32deg);<br>}</blockquote>",
        "<hr>",
        "使用<code>transform</code>属性沿 X 轴翻转 id 为<code>bottom</code>的元素 24 度。"
      ],
      "tests": [
        {
          "text": "id 为<code>bottom</code>的元素应该沿着 X 轴翻转 24 度。",
          "testString": "assert(code.match(/#bottom\\s*?{\\s*?.*?\\s*?transform:\\s*?skewX\\(24deg\\);/g), 'id 为<code>bottom</code>的元素应该沿着 X 轴翻转 24 度。');"
        }
      ],
      "solutions": [],
      "hints": [
        "注意声明角度值时数字和 \"deg\" 之间没有空格（-32deg）。"
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin:  50px auto;",
            "  }",
            "  #top {",
            "    background-color: red;",
            "  }",
            "  #bottom {",
            "    background-color: blue;",
            "    ",
            "  }",
            "</style>",
            "",
            "<div id=\"top\"></div>",
            "<div id=\"bottom\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512adc",
      "title": "Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis",
      "description": [
        "<code>skewX</code>函数使指定元素沿 X 轴翻转指定的角度，想必你已经猜到了，<code>skewY</code>属性使指定元素沿 Y 轴（垂直方向）翻转指定角度。",
        "<hr>",
        "使用<code>transform</code>属性沿 Y 轴翻转 id 为<code>top</code>的元素 -10 度。"
      ],
      "tests": [
        {
          "text": "id 为<code>top</code>的元素应该沿着 Y 轴翻转 -10 度。",
          "testString": "assert(code.match(/#top\\s*?{\\s*?.*?\\s*?transform:\\s*?skewY\\(-10deg\\);/g), 'id 为<code>top</code>的元素应该沿着 Y 轴翻转 -10 度。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin: 50px auto;",
            "  }",
            "  #top {",
            "    background-color: red;",
            "    ",
            "  }",
            "  #bottom {",
            "    background-color: blue;",
            "    transform: skewX(24deg);",
            "  }",
            "</style>",
            "",
            "<div id=\"top\"></div>",
            "<div id=\"bottom\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512add",
      "title": "Create a Graphic Using CSS",
      "description": [
        "通过使用选择器选择不同的元素并改变其属性，你可以创造一些有趣的形状。比如新月。在本关你会使用<code>box-shadow</code>属性来设置元素的阴影，<code>border-radius</code>属性控制元素的外边框圆角。",
        "首先你将会创建一个圆的、透明的对象，它具有模糊阴影并略微向两边递减。如你所见，这个阴影其实就是新月形狀。",
        "为了创建一个圆形的对象，<code>border-radius</code>应该被设置成 50%。",
        "你应该还记得之前关卡的<code>box-shadow</code>属性以及它的依次取值<code>offset-x</code>、<code>offset-y</code>、<code>blur-radius</code>、<code>spread-radius</code>和颜色值。其中<code>blur-radius</code>和<code>spread-radius</code>是可选的。",
        "<hr>",
        "把编辑器里的正方形元素变成新月形状。首先，把<code>background-color</code>改为透明，接着把<code>border-radius</code>属性设置成 50%，以创建一个圆形。最后，更改<code>box-shadow</code>属性，使其<code>offset-x</code>为 25px，<code>offset-y</code>为 10px，<code>blur-radius</code>为 0，<code>spread-radius</code>为 0，颜色为蓝色。"
      ],
      "tests": [
        {
          "text": "<code>background-color</code>属性应该取值<code>transparent</code>。",
          "testString": "assert(code.match(/background-color:\\s*?transparent;/gi), '<code>background-color</code>属性应该取值<code>transparent</code>。');"
        },
        {
          "text": "<code>border-radius</code>属性应该取值<code>50%</code>。",
          "testString": "assert(code.match(/border-radius:\\s*?50%;/gi), '<code>border-radius</code>属性应该取值<code>50%</code>。');"
        },
        {
          "text": "<code>box-shadow</code>属性的<code>offset-x</code>、<code>offset-y</code>、<code>blur-radius</code>、<code>spread-radius</code>和<code>color</code>应该依次取值<code>25px</code>、<code>10px</code>、<code>0</code>、<code>0</code>和<code>blue</code>。",
          "testString": "assert(code.match(/box-shadow:\\s*?25px\\s+?10px\\s+?0(px)?\\s+?0(px)?\\s+?blue\\s*?;/gi), '<code>box-shadow</code>属性的<code>offset-x</code>、<code>offset-y</code>、<code>blur-radius</code>、<code>spread-radius</code>和<code>color</code>应该依次取值<code>25px</code>、<code>10px</code>、<code>0</code>、<code>0</code>和<code>blue</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            ".center",
            "{",
            "  position: absolute;",
            "  margin: auto;",
            "  top: 0;",
            "  right: 0;",
            "  bottom: 0;",
            "  left: 0;",
            "  width: 100px;",
            "  height: 100px;",
            "  ",
            "  background-color: blue;",
            "  border-radius: 0px;",
            "  box-shadow: 25px 10px 10px 10px green; ",
            "}",
            "",
            "</style>",
            "<div class=\"center\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512ade",
      "title": "Create a More Complex Shape Using CSS and HTML",
      "description": [
        "世界上最流行的形状非心形莫属了，在本关里你将用纯 CSS 创建一个心形。但是首先你需要了解<code>:before</code>和<code>:after</code>伪类。这些伪类用来在选择元素之前和之后添加一些内容。在下面的例子里，<code>:before</code>伪类元素用来给 class 为<code>heart</code>的元素添加一个正方形。",
        "<blockquote>.heart:before {<br>&nbsp;&nbsp;content: \"\";<br>&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;border-radius: 25%;<br>&nbsp;&nbsp;position: absolute;<br>&nbsp;&nbsp;height: 50px;<br>&nbsp;&nbsp;width: 70px;<br>&nbsp;&nbsp;top: -50px;<br>&nbsp;&nbsp;left: 5px;<br>}</blockquote>",
        "<code>:before</code>和<code>:after</code>必须配合<code>content</code>来使用。这个属性通常用来给元素添加内容诸如图片或者文字。当<code>:before</code>和<code>:after</code>伪类用来添加某些形状而不是图片或文字时，<code>content</code>属性仍然是必需的，但是它的值可以是空字符串。",
        "在上面的例子里，class 为<code>heart</code>元素的<code>:before</code>伪类添加了一个黄色的长方形，长方形的<code>height</code>和<code>width</code>分别为 50px 和 70px。由于设置了其边框半径为 25%，所以长方形为圆角长方形，同时其相对位置为距离<code>left</code>5px，以及向<code>top</code>偏移 50px。",
        "<hr>",
        "把屏幕里的元素变成心形。在<code>heart:after</code>选择器里面，把<code>background-color</code>改成粉色（pink），把<code>border-radius</code>改成 50%。",
        "接下来，在<code>heart</code>class 选择器（单纯的<code>heart</code>元素）里面，完善<code>transform</code>属性。使用<code>rotate()</code>函数并赋参 -45 度。（<code>rotate()</code>用法和<code>skewX</code>以及<code>skewY</code>类似）。",
        "最后，在<code>heart:before</code>选择器里面，设置<code>content</code>属性为空字符串。"
      ],
      "tests": [
        {
          "text": "<code>heart:after</code>选择器的<code>background-color</code>属性值应该为粉色。",
          "testString": "assert(code.match(/\\.heart:after\\s*?{\\s*?background-color\\s*?:\\s*?pink\\s*?;/gi), '<code>heart:after</code>选择器的<code>background-color</code>属性值应该为粉色。');"
        },
        {
          "text": "<code>heart:after</code>选择器的<code>border-radius</code>属性值应该为 50%。",
          "testString": "assert(code.match(/border-radius\\s*?:\\s*?50%/gi).length == 2, '<code>heart:after</code>选择器的<code>border-radius</code>属性值应该为 50%。');"
        },
        {
          "text": "<code>heart</code>class 的<code>transform</code>属性应该使用<code>rotate()</code>函数并赋参为<code>-45deg</code>。",
          "testString": "assert(code.match(/transform\\s*?:\\s*?rotate\\(\\s*?-45deg\\s*?\\)/gi), '<code>heart</code>class 的<code>transform</code>属性应该使用<code>rotate()</code>函数并赋参为<code>-45deg</code>。');"
        },
        {
          "text": "<code>heart:before</code>选择器的<code>content</code>应该为空字符串。",
          "testString": "assert(code.match(/\\.heart:before\\s*?{\\s*?content\\s*?:\\s*?(\"|')\\1\\s*?;/gi), '<code>heart:before</code>选择器的<code>content</code>应该为空字符串。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            ".heart {",
            "  position: absolute;",
            "  margin: auto;",
            "  top: 0;",
            "  right: 0;",
            "  bottom: 0;",
            "  left: 0;",
            "  background-color: pink;",
            "  height: 50px;",
            "  width: 50px;",
            "  transform: ;",
            "}",
            ".heart:after {",
            "  background-color: blue;",
            "  content: \"\";",
            "  border-radius: 25%;",
            "  position: absolute;",
            "  width: 50px;",
            "  height: 50px;",
            "  top: 0px;",
            "  left: 25px;",
            "}",
            ".heart:before {",
            "  content: ;",
            "  background-color: pink;",
            "  border-radius: 50%;",
            "  position: absolute;",
            "  width: 50px;",
            "  height: 50px;",
            "  top: -25px;",
            "  left: 0px;",
            "}",
            "</style>",
            "<div class = \"heart\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512adf",
      "title": "Learn How the CSS @keyframes and animation Properties Work",
      "description": [
        "如果要给元素添加动画，你需要了解<code>animation</code>属性以及<code>@keyframes</code>规则。<code>animation</code>属性控制动画的外观，<code>@keyframes</code>规则控制动画中各阶段的变化。总共有 8 个<code>animation</code>属性。为了便于理解，本关暂时只涉及到两个最常用的属性。",
        "<code>animation-name</code>设置动画的名称， 也就是要绑定的选择器的<code>@keyframes</code>的名称。",
        "<code>animation-duration</code>设置动画所花费的时间。",
        "<code>@keyframes</code>能够创建动画。 创建动画的原理是将一套 CSS 样式逐渐变化为另一套样式。具体是通过设置动画期间对应的“frames”的 CSS 的属性，以百分比来规定改变的时间，或者通过关键词“from”和“to”，等价于 0% 和 100%。打个比方，CSS 里面的 0% 属性就像是电影里面的开场镜头。CSS 里面的 100% 属性就是元素最后的样子，相当于电影里的演职员表或者鸣谢镜头。CSS 在对应的时间内给元素过渡添加效果。下面举例说明<code>@keyframes</code>和动画属性的用法：",
        "<blockquote>#anim {<br>&nbsp;&nbsp;animation-name: colorful;<br>&nbsp;&nbsp;animation-duration: 3s;<br>}<br>@keyframes colorful {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "id 为<code>anim</code>的元素，代码设置<code>animation-name</code>为<code>colorful</code>，设置<code>animation-duration</code>为 3 秒。然后把<code>@keyframes</code>引用到名为<code>colorful</code>的动画属性上。<code>colorful</code>在动画开始时（0%）设置颜色为蓝色，在动画结束时（100%）设置颜色为黄色。注意不是只有开始和结束的过渡可以设置，0% 到 100% 间的任意百分比你都可以设置。",
        "<hr>",
        "给 id 为<code>rect</code> 的元素添加动画，设置其<code>animation-name</code>为 rainbow，设置其<code>animation-duration</code>为 4 秒。然后声明<code>@keyframes</code>规则，设置动画开始时（0%）的<code>background-color</code>为蓝色，动画中间时（50%）为绿色，动画结束时（100%）为为黄色。"
      ],
      "tests": [
        {
          "text": "id 为<code>rect</code>的元素应该有一个值为 rainbow 的<code>animation-name</code>属性。",
          "testString": "assert($('#rect').css('animation-name') == 'rainbow', 'id 为<code>rect</code>的元素应该有一个值为 rainbow 的<code>animation-name</code>属性。');"
        },
        {
          "text": "id 为<code>rect</code>的元素应该有一个值为 4s 的<code>animation-duration</code>属性。",
          "testString": "assert($('#rect').css('animation-duration') == '4s', 'id 为<code>rect</code>的元素应该有一个值为 4s 的<code>animation-duration</code>属性。');"
        },
        {
          "text": "<code>@keyframes</code>规则的<code>animation-name</code>应该为 rainbow。",
          "testString": "assert(code.match(/@keyframes\\s+?rainbow\\s*?{/g), '<code>@keyframes</code>规则的<code>animation-name</code>应该为 rainbow。');"
        },
        {
          "text": "<code>@keyframes</code>规则的 rainbow 在 0% 时的<code>background-color</code>应该为蓝色。",
          "testString": "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?}/gi), '<code>@keyframes</code>规则的 rainbow 在 0% 时的<code>background-color</code>应该为蓝色。');"
        },
        {
          "text": "<code>@keyframes</code>规则的 rainbow 在 50% 时的<code>background-color</code>应该为绿色。",
          "testString": "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?}/gi), '<code>@keyframes</code>规则的 rainbow 在 50% 时的<code>background-color</code>应该为绿色。');"
        },
        {
          "text": "<code>@keyframes</code>规则的 rainbow 在 100% 时的<code>background-color</code>应该为黄色。",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?}/gi), '<code>@keyframes</code>规则的 rainbow 在 100% 时的<code>background-color</code>应该为黄色。');"
        }
      ],
      "solutions": [],
      "hints": [
        "Make sure the @keyframes rule links to the animation-name."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    height: 40px;",
            "    width: 70%;",
            "    background: black;",
            "    margin: 50px auto;",
            "    border-radius: 5px;",
            "  }",
            "",
            "  #rect {",
            "    ",
            "    ",
            "  }",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<div id=\"rect\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae0",
      "title": "Use CSS Animation to Change the Hover State of a Button",
      "description": [
        "你可以在按钮悬停时使用<code>@keyframes</code>改变按钮的颜色。",
        "下面是在图片悬停时改变图片宽度的例子：",
        "<blockquote>&lt;style&gt;<br>&nbsp;&nbsp;img:hover {<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-name: width;<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-duration: 500ms;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;@keyframes width {<br>&nbsp;&nbsp;&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 40px;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br>&lt;img src=&quot;https://bit.ly/smallgooglelogo&quot; alt=&quot;Google's Logo&quot; /&gt;</blockquote>",
        "<hr>",
        "注意<code>ms</code>代表毫秒，1000ms 等于 1s。",
        "使用<code>@keyframes</code>来改变<code>button</code>元素的<code>background-color</code>，使其当悬停时变成<code>#4791d0</code>。<code>@keyframes</code>规则应该只有一个<code>100%</code>条目。"
      ],
      "tests": [
        {
          "text": "<code>@keyframes</code>规则的<code>animation-name</code>应该是 background-color。",
          "testString": "assert(code.match(/@keyframes\\s+?background-color\\s*?{/g), '<code>@keyframes</code>规则的<code>animation-name</code>应该是 background-color。');"
        },
        {
          "text": "在<code>@keyframes</code>的<code>100%</code>条目里应该把<code>background-color</code>改成<code>#4791d0</code>。",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?#4791d0;\\s*?}/gi), '在<code>@keyframes</code>的<code>100%</code>条目里应该把<code>background-color</code>改成<code>#4791d0</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  button {",
            "    border-radius: 5px;",
            "    color: white;",
            "    background-color: #0F5897;",
            "    padding: 5px 10px 8px 10px;",
            "  }",
            "  ",
            "  button:hover {",
            "    animation-name: background-color;",
            "    animation-duration: 500ms;",
            "  }",
            "  ",
            "  ",
            "</style>",
            "  ",
            "<button>注册</button>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "58a7a6ebf9a6318348e2d5aa",
      "title": "Modify Fill Mode of an Animation",
      "description": [
        "太棒了，但是现在还不完美。注意动画在<code>500ms</code>之后重置了，所以按钮又变成了之前的颜色。而我们想要的效果是按钮在悬停时始终高亮。",
        "这可以通过把<code>animation-fill-mode</code>设置成<code>forwards</code>来实现。<code>animation-fill-mode</code>指定了在动画结束时元素的样式。你可以向这样设置它：",
        "<code>animation-fill-mode: forwards;</code>",
        "<hr>",
        "设置<code>button:hover</code>的<code>animation-fill-mode</code>，使按钮悬停时保持高亮。"
      ],
      "tests": [
        {
          "text": "<code>button:hover</code>应该有一个值为<code>forwards</code>的<code>animation-fill-mode</code>的属性。",
          "testString": "assert(code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-fill-mode\\s*?:\\s*?forwards\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-name\\s*?:\\s*?background-color\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-duration\\s*?:\\s*?500ms\\s*?;[\\s\\S]*}/gi), '<code>button:hover</code>应该有一个值为<code>forwards</code>的<code>animation-fill-mode</code>的属性。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  button {",
            "    border-radius: 5px;",
            "    color: white;",
            "    background-color: #0F5897;",
            "    padding: 5px 10px 8px 10px;",
            "  }",
            "  button:hover {",
            "    animation-name: background-color;",
            "    animation-duration: 500ms;",
            "    /* add your code below this line */",
            "    ",
            "    /* add your code above this line */",
            "  }",
            "  @keyframes background-color {",
            "    100% {",
            "      background-color: #4791d0;",
            "    }",
            "  }",
            "</style>",
            "<button>注册</button>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae1",
      "title": "Create Movement Using CSS Animation",
      "description": [
        "当元素的<code>position</code>被指定，如<code>fixed</code>或者<code>relative</code>时，CSS 偏移属性<code>right</code>、<code>left</code>、<code>top</code>和<code>bottom</code>可以用在动画规则里创建动作。",
        "就像下面的例子展示的那样，你可以在<code>50%</code>keyframe 处设置<code>top</code>属性为 50px， 在开始（0%）和最后（100%）keframe 处设置为 0px，以产生项目向下运动，然后返回的动作效果。",
        "<blockquote>@keyframes rainbow {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;50% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: green;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 50px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "让<code>div</code>水平运动。使用<code>left</code>偏移属性，添加<code>@keyframes</code>规则，让 rainbow 在<code>0%</code>的 0 像素开始，在<code>50%</code>时移动到 25 像素，在<code>100%</code>时时移动到 -25 像素。不要替换编辑器里的<code>top</code>属性，动画应该同时向水平和竖直方向运动。"
      ],
      "tests": [
        {
          "text": "<code>0%</code>的<code>@keyframes</code>规则应该为向<code>left</code>偏移<code>0px</code>。",
          "testString": "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?top:\\s*?0px;\\s*?left:\\s*?0px;\\s*?}/gi), '<code>0%</code>的<code>@keyframes</code>规则应该为向<code>left</code>偏移<code>0px</code>。');"
        },
        {
          "text": "<code>50%</code>的<code>@keyframes</code>规则应该为向<code>left</code>偏移<code>25px</code>。",
          "testString": "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?top:\\s*?50px;\\s*?left:\\s*?25px;\\s*?}/gi), '<code>50%</code>的<code>@keyframes</code>规则应该为向<code>left</code>偏移<code>25px</code>。');"
        },
        {
          "text": "<code>100%</code>的<code>@keyframes</code>规则应该为向<code>left</code>偏移<code>-25px</code>。",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?top:\\s*?0px;\\s*?left:\\s*?-25px;\\s*?}/gi), '<code>100%</code>的<code>@keyframes</code>规则应该为向<code>left</code>偏移<code>-25px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    height: 40px;",
            "    width: 70%;",
            "    background: black;",
            "    margin: 50px auto;",
            "    border-radius: 5px;",
            "    position: relative;",
            "  }",
            "",
            "#rect {",
            "  animation-name: rainbow;",
            "  animation-duration: 4s;",
            "}",
            "",
            "@keyframes rainbow {",
            "  0% {",
            "    background-color: blue;",
            "    top: 0px;",
            "    ",
            "  }",
            "  50% {",
            "    background-color: green;",
            "    top: 50px;",
            "    ",
            "  }",
            "  100% {",
            "    background-color: yellow;",
            "    top: 0px;",
            "    ",
            "  }",
            "}",
            "</style>",
            "",
            "<div id=\"rect\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae2",
      "title": "Create Visual Direction by Fading an Element from Left to Right",
      "description": [
        "在本关里，你将要改变动画元素的<code>opacity</code>，使其在到达屏幕右侧时渐隐。",
        "在展示的动画里，具有渐变背景的圆形元素在 50% 标记的<code>@keyframes</code>规则处向右移动。",
        "<hr>",
        "使用 id 选择器选择 id 为<code>ball</code>的元素，在<code>50%</code>里添加<code>opacity</code>属性并赋值 0.1，使其在向右移动时渐隐。"
      ],
      "tests": [
        {
          "text": "50% 处<code>keyframes</code>规则应该设置<code>opacity</code>属性值为 0.1 以使其渐隐。",
          "testString": "assert(code.match(/@keyframes fade\\s*?{\\s*?50%\\s*?{\\s*?(?:left:\\s*?60%;\\s*?opacity:\\s*?0?\\.1;|opacity:\\s*?0?\\.1;\\s*?left:\\s*?60%;)/gi), '50% 处<code>keyframes</code>规则应该设置<code>opacity</code>属性值为 0.1 以使其渐隐。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  #ball {",
            "    width: 70px;",
            "    height: 70px;",
            "    margin: 50px auto;",
            "    position: fixed;",
            "    left: 20%;",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    animation-name: fade;",
            "    animation-duration: 3s;",
            "  }",
            "",
            "  @keyframes fade {",
            "    50% {",
            "      left: 60%;",
            "      ",
            "    }",
            "  }",
            "",
            "</style>",
            "",
            "<div id=\"ball\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae3",
      "title": "Animate Elements Continually Using an Infinite Animation Count",
      "description": [
        "之前的关卡里介绍了一些动画属性以及<code>@keyframes</code>规则的用法。还有一个常用的动画属性是<code>animation-iteration-count</code>，这个属性允许你控制动画循环的次数。下面是一个例子：",
        "<code>animation-iteration-count: 3;</code>",
        "在这里动画会在运行 3 次后停止，如果想让动画一直运行，可以把值设置成 infinite。",
        "<hr>",
        "把<code>animation-iteration-count</code>属性改成 infinite，以使右边的球持续跳跃。"
      ],
      "tests": [
        {
          "text": "<code>animation-iteration-count</code>属性值应该为 infinite。",
          "testString": "assert($('#ball').css('animation-iteration-count') == 'infinite', '<code>animation-iteration-count</code>属性值应该为 infinite。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  #ball {",
            "    width: 100px;",
            "    height: 100px;",
            "    margin: 50px auto;",
            "    position: relative;",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    animation-name: bounce;",
            "    animation-duration: 1s;",
            "    animation-iteration-count: 3;",
            "  }",
            "",
            "  @keyframes bounce{",
            "    0% {",
            "      top: 0px;",
            "    }",
            "    50% {",
            "      top: 249px;",
            "      width: 130px;",
            "      height: 70px;",
            "    }",
            "    100% {",
            "      top: 0px;",
            "    }",
            "  }",
            "</style>",
            "<div id=\"ball\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae4",
      "title": "Make a CSS Heartbeat using an Infinite Animation Count",
      "description": [
        "这也是一个用<code>animation-iteration-count</code>属性创造持续动画的例子，它基于前面关卡创建的心形。",
        "心跳动画的每一秒包含两个部分。<code>heart</code>元素（包括<code>:before</code>和<code>:after</code>）使用<code>transform</code>属性改变其大小，背景<code>div</code>使用<code>background</code>属性改变其颜色。",
        "<hr>",
        "给<code>back</code>class和<code>heart</code>class添加值为 infinite 的<code>animation-iteration-count</code>属性，使心脏持续跳动。<code>heart:before</code>和<code>heart:after</code>选择器不需要添加动画属性。"
      ],
      "tests": [
        {
          "text": "<code>heart</code>class 的<code>animation-iteration-count</code>属性应该赋值 infinte。",
          "testString": "assert($('.heart').css('animation-iteration-count') == 'infinite', '<code>heart</code>class 的<code>animation-iteration-count</code>属性应该赋值 infinite。');"
        },
        {
          "text": "<code>back</code>class 的<code>animation-iteration-count</code>属性应该赋值 infinite。",
          "testString": "assert($('.back').css('animation-iteration-count') == 'infinite', '<code>back</code>class 的<code>animation-iteration-count</code>属性应该赋值 infinite。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: white;",
            "    animation-name: backdiv;",
            "    animation-duration: 1s; ",
            "    ",
            "  }",
            "",
            "  .heart {",
            "    position: absolute;",
            "    margin: auto;",
            "    top: 0;",
            "    right: 0;",
            "    bottom: 0;",
            "    left: 0;",
            "    background-color: pink;",
            "    height: 50px;",
            "    width: 50px;",
            "    transform: rotate(-45deg);",
            "    animation-name: beat;",
            "    animation-duration: 1s;",
            "    ",
            "  }",
            "  .heart:after {",
            "    background-color: pink;",
            "    content: \"\";",
            "    border-radius: 50%;",
            "    position: absolute;",
            "    width: 50px;",
            "    height: 50px;",
            "    top: 0px;",
            "    left: 25px;",
            "  }",
            "  .heart:before {",
            "    background-color: pink;",
            "    content: \"\";",
            "    border-radius: 50%;",
            "    position: absolute;",
            "    width: 50px;",
            "    height: 50px;",
            "    top: -25px;",
            "    left: 0px;",
            "  }",
            "",
            "  @keyframes backdiv {",
            "    50% {",
            "      background: #ffe6f2;",
            "    }",
            "  }",
            "",
            "  @keyframes beat {",
            "    0% {",
            "      transform: scale(1) rotate(-45deg);",
            "    }",
            "    50% {",
            "      transform: scale(0.6) rotate(-45deg);",
            "    }",
            "  }",
            "",
            "</style>",
            "<div class=\"back\"></div>",
            "<div class=\"heart\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae5",
      "title": "Animate Elements at Variable Rates",
      "description": [
        "改变相似元素的动画频率的方法有很多。目前接触到的就有<code>animation-iteration-count</code>和<code>@keyframes</code>。",
        "举例说明，右边的动画包含了两个小星星，每个小星星都在 20%<code>@keyframes</code>处变小并且 opacity 变为 20%，也就是一闪一闪的动画效果。你可以通过改变其中一个星星的<code>@keyframes</code>规则以使两个小星星以不同的频率闪烁。",
        "<hr>",
        "通过改变 class 为<code>star-1</code>的元素的<code>@keyframes</code>为 50% 以改变其动画频率。"
      ],
      "tests": [
        {
          "text": "<code>star-1</code>class 的<code>@keyframes</code>规则应该为50%。",
          "testString": "assert(code.match(/twinkle-1\\s*?{\\s*?50%/g), '<code>star-1</code>class 的<code>@keyframes</code>规则应该为50%。');"
        }
      ],
      "solutions": [],
      "hints": [
        "检查 start-1 class 的 animation-name 声明以找到需要改变的 @keyframes 规则。"
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .stars {",
            "    background-color: white;",
            "    height: 30px;",
            "    width: 30px;",
            "    border-radius: 50%;",
            "    animation-iteration-count: infinite;",
            "  }",
            "",
            "  .star-1 {",
            "    margin-top: 15%; ",
            "    margin-left: 60%;",
            "    animation-name: twinkle-1;",
            "    animation-duration: 1s;",
            "  }",
            "",
            "  .star-2 {",
            "    margin-top: 25%;",
            "    margin-left: 25%;",
            "    animation-name: twinkle-2;",
            "    animation-duration: 1s;",
            "  }",
            "",
            "  @keyframes twinkle-1 {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  @keyframes twinkle-2 {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  #back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);",
            "  }",
            "</style>",
            "",
            "<div id=\"back\"></div>",
            "<div class=\"star-1 stars\"></div>",
            "<div class=\"star-2 stars\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae6",
      "title": "Animate Multiple Elements at Variable Rates",
      "description": [
        "在前面的关卡里，你通过改变<code>@keyframes</code>改变了两个相似动画元素的频率。你也可以通过改变多个元素的<code>animation-duration</code>来达到同样的效果。",
        "在编辑器代码运行的动画里，天空中有三个以同样频率不停的闪烁的星星。你可以设置每一个星星的<code>animation-duration</code>属性为不同的值来使其具有不同的闪烁频率。",
        "<hr>",
        "依次设置 class 为<code>star-1</code>、<code>star-2</code>、<code>star-3</code>的<code>animation-duration</code>为 1s、0.9s、1.1s。"
      ],
      "tests": [
        {
          "text": "class 为<code>star-1</code>的<code>animation-duration</code>属性值应该 1s。",
          "testString": "assert($('.star-1').css('animation-duration') == '1s', 'class 为<code>star-1</code>的<code>animation-duration</code>属性值应该 1s。');"
        },
        {
          "text": "class 为<code>star-2</code>的<code>animation-duration</code>属性值应该 0.9s。",
          "testString": "assert($('.star-2').css('animation-duration') == '0.9s', 'class 为<code>star-2</code>的<code>animation-duration</code>属性值应该 0.9s。');"
        },
        {
          "text": "class 为<code>star-3</code>的<code>animation-duration</code>属性值应该 1.1s。",
          "testString": "assert($('.star-3').css('animation-duration') == '1.1s', 'class 为<code>star-3</code>的<code>animation-duration</code>属性值应该 1.1s。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .stars {",
            "    background-color: white;",
            "    height: 30px;",
            "    width: 30px;",
            "    border-radius: 50%;",
            "    animation-iteration-count: infinite;",
            "  }",
            "",
            "  .star-1 {",
            "    margin-top: 15%; ",
            "    margin-left: 60%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  .star-2 {",
            "    margin-top: 25%;",
            "    margin-left: 25%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  .star-3 {",
            "    margin-top: 10%;",
            "    margin-left: 50%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  @keyframes twinkle {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  #back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);",
            "  }",
            "</style>",
            "",
            "<div id=\"back\"></div>",
            "<div class=\"star-1 stars\"></div>",
            "<div class=\"star-2 stars\"></div>",
            "<div class=\"star-3 stars\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae7",
      "title": "Change Animation Timing with Keywords",
      "description": [
        "在 CSS 动画里，<code>animation-timing-function</code>规定动画的速度曲线。速度曲线定义动画从一套 CSS 样式变为另一套所用的时间。如果要描述的动画是一辆车在指定时间内（<code>animation-duration</code>）从 A 运动到 B，那么<code>animation-timing-function</code>表述的就是车在运动中的加速和减速等过程。",
        "已经有了很多预定义的值可以直接使用于大部分场景。比如，默认的值是<code>ease</code>，动画以低速开始，然后加快，在结束前变慢。其它常用的值包括<code>ease-out</code>，动画以高速开始，以低速结束;<code>ease-in</code>，动画以低速开始，以高速结束；<code>linear</code>，动画从头到尾的速度是相同的。",
        "<hr>",
        "给 id 为<code>ball1</code>和<code>ball2</code>的元素添加<code>animation-timing-function</code>，<code>ball1</code>赋值为<code>linear</code>，<code>ball2</code>赋值为<code>ease-out</code>。它们的<code>animation-duration</code>都为 2 秒，注意观察它们在开始和结束时的不同。"
      ],
      "tests": [
        {
          "text": "id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性值应该为 linear。",
          "testString": "assert($('#ball1').css('animation-timing-function') == 'linear', 'id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性值应该为 linear。');"
        },
        {
          "text": "id 为<code>ball2</code>的元素的<code>animation-timing-function</code>属性值应该为 ease-out。",
          "testString": "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'id 为<code>ball2</code>的元素的<code>animation-timing-function</code>属性值应该为 ease-out。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  .balls {",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #ball1 { ",
            "    left:27%;",
            "    ",
            "  }",
            "  #ball2 { ",
            "    left:56%;",
            "    ",
            "  }",
            "",
            "@keyframes bounce {",
            "  0% {",
            "    top: 0px;",
            "  } ",
            "  100% {",
            "    top: 249px;",
            "  }",
            "} ",
            "",
            "</style>",
            "",
            "<div class=\"balls\" id=\"ball1\"></div>",
            "<div class=\"balls\" id=\"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512ae8",
      "title": "Learn How Bezier Curves Work",
      "description": [
        "上一关卡介绍了<code>animation-timing-function</code>以及它的一些预定义的值。这些值定义了不同时间内的动画速度。除了预定义值之外，CSS 还提供了贝塞尔曲线（Bezier curves）来更出色的控制动画的速度曲线。",
        "在 CSS 动画里，用<code>cubic-bezier</code>来定义贝塞尔曲线。曲线的形状代表了动画的速度。曲线在 1*1 的坐标系统内，曲线的 X 轴代表动画的时间间隔（类似于时间比例尺），Y 轴代表动画的改变。",
        "<code>cubic-bezier</code>函数包含了 1*1 网格里的4个点：<code>p0</code>，<code>p1</code>，<code>p2</code>，和<code>p3</code>。其中<code>p0</code>和<code>p3</code>是固定值，代表曲线的起始点和结束点，坐标值依次为 (0, 0) 和 (1, 1)。你只需设置另外两点的 x 值和 y 值，设置的这两点确定了曲线的形状从而确定了动画的速度曲线。在 CSS 里面通过<code>(x1, y1, x2, y2)</code>来确定<code>p1</code>和<code>p2</code>。综上，下面就是 CSS 贝塞尔曲线的例子：",
        "<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code>",
        "在上面的例子里，两个点的 x 和 y 值相等（x1 = 0.25 = y1 和 x2 = 0.75 = y2），如果你还记得初中几何，结果是从原点到点 (1, 1) 的一条直线。动画速度呈线性，效果和<code>linear</code>一致。换言之，元素匀速运动。",
        "<hr>",
        "对于 id 为<code>ball1</code>的元素，把<code>animation-timing-function</code>属性值从<code>linear</code>变成等价的<code>cubic-bezier</code>函数值。也就是说使用上面例子给的值。"
      ],
      "tests": [
        {
          "text": "id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性值应该为和 linear 预定值等价的贝塞尔函数值。",
          "testString": "assert($('#ball1').css('animation-timing-function') == 'cubic-bezier(0.25, 0.25, 0.75, 0.75)', 'id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性应该为和 linear 预定值等价的贝塞尔函数值。');"
        },
        {
          "text": "id 为<code>ball2</code>元素的<code>animation-timing-function</code>属性值应该保持不变。",
          "testString": "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'id 为<code>ball2</code>元素的<code>animation-timing-function</code>属性值应该保持不变。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  .balls{",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #ball1 { ",
            "    left: 27%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #ball2 { ",
            "    left: 56%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "",
            "@keyframes bounce {",
            "  0% {",
            "    top: 0px;",
            "  } ",
            "  100% {",
            "    top: 249px;",
            "  }",
            "} ",
            "",
            "</style>",
            "",
            "<div class=\"balls\" id=\"ball1\"></div>",
            "<div class=\"balls\" id=\"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512ae9",
      "title": "Use a Bezier Curve to Move a Graphic",
      "description": [
        "前面的关卡涉及的<code>ease-out</code>预定义值描述了动画以高速开始低速结束。右边的动画展示了<code>ease-out</code>预定义值（蓝色的元素）和<code>linear</code>预定义值（红色的元素）的区别。同样的，<code>ease-out</code>预定义值也可以用贝塞尔曲线函数实现。",
        "通俗的讲，将一条直线放在范围只有 1 的坐标轴中，并从中间拿<code>p1</code>和<code>p2</code>两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的贝塞尔速度曲线。下面是贝塞尔曲线模仿 ease-out 预定义值的例子：",
        "<code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code>",
        "记住所有的<code>cubic-bezier</code>函数都是从坐标为 (0, 0) 的<code>p0</code>开始，在坐标为 (1, 1) 的<code>p3</code>结束。在这个例子里，曲线在 y 轴（从 0 开始，运动到<code>p1</code>的 0，然后运动到<code>p2</code>的 1）上移动的比在 x 轴（从 0 开始，运动到<code>p1</code>的 0，到<code>p2</code>的 0.58）上移动的快。结果是，在这一段动画内元素运动的快。到曲线的结尾，x 和 y 之间的关系反过来了，y 值保持为1，没有变化，x 值从 0.58 变为 1，元素运动的慢。",
        "<hr>",
        "为了看贝塞尔曲线的运动效果，把 id 为<code>red</code>的元素的<code>animation-timing-function</code>属性赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。这会使两个元素运动过程类似。"
      ],
      "tests": [
        {
          "text": "id 为<code>red</code>的元素的<code>animation-timing-function</code>属性应当赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。",
          "testString": "assert($('#red').css('animation-timing-function') == 'cubic-bezier(0, 0, 0.58, 1)', 'id 为<code>red</code>的元素的<code>animation-timing-function</code>属性应当赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。');"
        },
        {
          "text": "id 为<code>red</code>的元素的<code>animation-timing-function</code>属性不应该取值 linear。",
          "testString": "assert($('#red').css('animation-timing-function') !== 'linear', 'id 为<code>red</code>的元素的<code>animation-timing-function</code>属性不应该取值 linear。');"
        },
        {
          "text": "id 为<code>blue</code>的元素的<code>animation-timing-function</code>属性不应该被改变。",
          "testString": "assert($('#blue').css('animation-timing-function') == 'ease-out', 'id 为<code>blue</code>的元素的<code>animation-timing-function</code>属性不应该被改变。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .balls{",
            "    border-radius: 50%;",
            "    position: fixed;",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #red {",
            "    background: red;",
            "    left: 27%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #blue {",
            "    background: blue;",
            "    left: 56%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "  @keyframes bounce {",
            "    0% {",
            "      top: 0px;",
            "    }",
            "    100% {",
            "      top: 249px;",
            "    }",
            "  }",
            "</style>",
            "<div class=\"balls\" id= \"red\"></div>",
            "<div class=\"balls\" id= \"blue\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512aea",
      "title": "Make Motion More Natural Using a Bezier Curve",
      "description": [
        "本关的元素模拟的是杂技抛接球。之前的关卡涉及了<code>linear</code>和<code>ease-out</code>的贝塞尔曲线描述，如你所见，这两个都无法完美的描述杂耍球的运动。在本关里你需要定制贝塞尔曲线。",
        "当<code>animation-iteration-count</code>值为 infinite 时<code>animation-timing-function</code>会自动循环 keyframe。由于是在动画周期中间（50%处）设置的 keyframe 规则，最终的结果是球向上和球向下是两个同样的动画过程。",
        "下面的例子模拟了杂耍球运动：",
        "<code>cubic-bezier(0.3, 0.4, 0.5, 1.6); </code>",
        "注意 y2 的值是大于 1 的。虽然贝塞尔曲线是在 1*1 的坐标系统内 x 值只能在 0 到 1，但是 y 值是可以大于 1 的。这样才能模拟杂耍球运动。",
        "<hr>",
        "把 id 为<code>green</code>的元素的<code>animation-timing-function</code>值改成<code>cubic-bezier</code>函数，函数的参数 x1，y1，x2，y2 值依次为 0.311、0.441、0.444、1.649。"
      ],
      "tests": [
        {
          "text": "id 为<code>green</code>的元素的<code>animation-timing-function</code>值应该为<code>cubic-bezier</code>函数，函数的参数 x1，y1，x2，y2 值依次为 0.311、0.441、0.444、1.649。",
          "testString": "assert($('#green').css('animation-timing-function') == 'cubic-bezier(0.311, 0.441, 0.444, 1.649)', 'id 为<code>green</code>的元素的<code>animation-timing-function</code>值应该为<code>cubic-bezier</code>函数，函数的参数 x1，y1，x2，y2 值依次为 0.311、0.441、0.444、1.649。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .balls {",
            "    border-radius: 50%;",
            "    top: 249px;",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    top: 60%;",
            "    animation-name: jump;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #red {",
            "    background: red;",
            "    left: 25%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #blue {",
            "    background: blue;",
            "    left: 50%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "  #green {",
            "    background: green;",
            "    left: 75%;",
            "    animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);",
            "  }",
            "",
            "  @keyframes jump {",
            "    50% {",
            "      top: 10%;",
            "    }",
            "  }",
            "</style>",
            "<div class=\"balls\" id=\"red\"></div>",
            "<div class=\"balls\" id=\"blue\"></div>",
            "<div class=\"balls\" id=\"green\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}
